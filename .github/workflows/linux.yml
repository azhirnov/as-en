name: Linux

on: [push, pull_request, workflow_dispatch]

jobs:
  build-gcc-13:
    strategy:
      matrix:
        config: [Debug, Develop, Profile, Release]
    
    runs-on: ubuntu-24.04
    name: Linux x64, GCC 13, ${{matrix.config}}
    
    steps:
    - uses: actions/checkout@v4
       
    - name: Configure dependencies
      run: |
        sudo apt install build-essential pkg-config libx11-dev libxcursor-dev \
          libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev \
          libxi-dev libxrandr-dev yasm liburing-dev libpng-dev libbz2-dev libwayland-dev \
          libxkbcommon-dev
 
    - name: Create Build Environment
      working-directory: ${{github.workspace}}
      run: |
        mkdir _build
        cd AE-Bin
        wget -O external.zip "https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/d/ItFRNcXTSg8jJw"
        unzip external.zip
    
    - name: Configure CMake
      env:
        CC: gcc-13
        CXX: g++-13
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.config}} -DAE_ENABLE_VULKAN=ON -DAE_RES_EDITOR_RELEASE=ON -DAE_GRAPHICS_STRONG_VALIDATION=ON -DAE_CI_BUILD_TEST=ON -DAE_ENABLE_LOGS=ON -S "AE" -B "_build"
    
    - name: Build
      working-directory: ${{github.workspace}}
      run: cmake --build "_build" --config ${{matrix.config}} -j 2
      
    - uses: actions/upload-artifact@v4
      with:
        name: AsEn-ResourceEditor-linux-x64-gcc13-${{matrix.config}}
        path: |
            ${{github.workspace}}/_build/bin/ResourceEditor
            
    - uses: actions/upload-artifact@v4
      with:
        name: AsEn-Tools-linux-x64-gcc13-${{matrix.config}}
        path: |
            ${{github.workspace}}/_build/bin/CICD
            ${{github.workspace}}/_build/bin/OfflinePacker
            ${{github.workspace}}/_build/bin/RemoteGraphicsDevice
            ${{github.workspace}}/_build/bin/GraphicsLib.so

    - name: Tests.Base
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Base" -C ${{matrix.config}} -V
      
    - name: Tests.Serializing
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Serializing" -C ${{matrix.config}} -V
        
    - name: Tests.Scripting
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Scripting" -C ${{matrix.config}} -V
        
    - name: Tests.Threading
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Threading" -C ${{matrix.config}} -V
       
    - name: Tests.Networking
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Networking" -C ${{matrix.config}} -V
       
    - name: Tests.ECS
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.ECS-st" -C ${{matrix.config}} -V
       
    - name: Tests.VFS
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.VFS" -C ${{matrix.config}} -V
       
    - name: Tests.AtlasTools
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.AtlasTools" -C ${{matrix.config}} -V
       
    - name: Tests.GeometryTools
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.GeometryTools" -C ${{matrix.config}} -V
       
    - name: Tests.ResourceLoaders
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.ResourceLoaders" -C ${{matrix.config}} -V
        
    - name: Tests.PipelineCompiler
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.PipelineCompiler" -C ${{matrix.config}} -V

            
      
  build-clang-16:
    strategy:
      matrix:
        config: [Debug, Develop, Profile, Release]
        
    runs-on: ubuntu-24.04
    name: Linux x64, Clang 16, ${{matrix.config}}
    
    steps:
    - uses: actions/checkout@v4
       
    - name: Configure dependencies
      run: |
        sudo apt install build-essential pkg-config libx11-dev libxcursor-dev \
          libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev \
          libxi-dev libxrandr-dev yasm liburing-dev libpng-dev libbz2-dev libwayland-dev \
          libxkbcommon-dev libc++-dev libc++abi-dev
 
    - name: Create Build Environment
      working-directory: ${{github.workspace}}
      run: |
        mkdir _build
        cd AE-Bin
        wget -O external.zip "https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/d/7FIqOv5RO-12oA"
        unzip external.zip
    
    - name: Configure CMake
      env:
        CC: clang-16
        CXX: clang++-16
        CPP: clang-cpp-16
        LD: ld.lld-16
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.config}} -DAE_ENABLE_VULKAN=ON -DAE_RES_EDITOR_RELEASE=ON -DAE_GRAPHICS_STRONG_VALIDATION=ON -DAE_CI_BUILD_TEST=ON -DAE_ENABLE_LOGS=ON -S "AE" -B "_build"
    
    - name: Build
      working-directory: ${{github.workspace}}
      run: cmake --build "_build" --config ${{matrix.config}} -j 2
      
    - uses: actions/upload-artifact@v4
      with:
        name: AsEn-ResourceEditor-linux-x64-clang16-${{matrix.config}}
        path: |
            ${{github.workspace}}/_build/bin/ResourceEditor
            
    - uses: actions/upload-artifact@v4
      with:
        name: AsEn-Tools-linux-x64-clang16-${{matrix.config}}
        path: |
            ${{github.workspace}}/_build/bin/CICD
            ${{github.workspace}}/_build/bin/OfflinePacker
            ${{github.workspace}}/_build/bin/RemoteGraphicsDevice
            ${{github.workspace}}/_build/bin/GraphicsLib.so

    - name: Tests.Base
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Base" -C ${{matrix.config}} -V
      
    - name: Tests.Serializing
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Serializing" -C ${{matrix.config}} -V
        
    - name: Tests.Scripting
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Scripting" -C ${{matrix.config}} -V
        
    - name: Tests.Threading
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Threading" -C ${{matrix.config}} -V
       
    - name: Tests.Networking
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.Networking" -C ${{matrix.config}} -V
       
    - name: Tests.ECS
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.ECS-st" -C ${{matrix.config}} -V
       
    - name: Tests.VFS
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.VFS" -C ${{matrix.config}} -V
       
    - name: Tests.AtlasTools
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.AtlasTools" -C ${{matrix.config}} -V
       
    - name: Tests.GeometryTools
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.GeometryTools" -C ${{matrix.config}} -V
       
    - name: Tests.ResourceLoaders
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.ResourceLoaders" -C ${{matrix.config}} -V
        
    - name: Tests.PipelineCompiler
      working-directory: ${{github.workspace}}/_build
      run: ctest -R "Tests.PipelineCompiler" -C ${{matrix.config}} -V
            
            
  build-clang-16-rg:
    strategy:
      matrix:
        config: [Debug, Develop, Profile, Release]
        
    runs-on: ubuntu-24.04
    name: Linux x64, Clang 16, ${{matrix.config}}, RemoteGraphics
    
    steps:
    - uses: actions/checkout@v4
       
    - name: Configure dependencies
      run: |
        sudo apt install build-essential pkg-config libx11-dev libxcursor-dev \
          libxinerama-dev libgl1-mesa-dev libglu-dev libasound2-dev libpulse-dev libudev-dev \
          libxi-dev libxrandr-dev yasm liburing-dev libpng-dev libbz2-dev libwayland-dev \
          libxkbcommon-dev libc++-dev libc++abi-dev
 
    - name: Create Build Environment
      working-directory: ${{github.workspace}}
      run: |
        mkdir _build
        cd AE-Bin
        wget -O external.zip "https://getfile.dokpub.com/yandex/get/https://disk.yandex.ru/d/7FIqOv5RO-12oA"
        unzip external.zip
    
    - name: Configure CMake
      env:
        CC: clang-16
        CXX: clang++-16
        CPP: clang-cpp-16
        LD: ld.lld-16
      shell: bash
      working-directory: ${{github.workspace}}
      run: cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=${{matrix.config}} -DAE_ENABLE_REMOTE_GRAPHICS=ON -DAE_RES_EDITOR_RELEASE=ON -DAE_GRAPHICS_STRONG_VALIDATION=ON -DAE_CI_BUILD_TEST=ON -DAE_ENABLE_LOGS=ON -S "AE" -B "_build"
    
    - name: Build
      working-directory: ${{github.workspace}}
      run: cmake --build "_build" --config ${{matrix.config}} -j 2 --target "ResourceEditor"
      
    - uses: actions/upload-artifact@v4
      with:
        name: AsEn-ResourceEditor-linux-x64-clang16-${{matrix.config}}-RemoteGraphics
        path: |
            ${{github.workspace}}/_build/bin/ResourceEditor
            
            
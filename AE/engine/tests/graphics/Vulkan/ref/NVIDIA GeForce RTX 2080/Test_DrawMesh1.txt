==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'DrawMesh1 |0| Draw task'
{

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'DrawTest.Draw_1'
    color attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BindPipeline
    pipeline:  'draw_mesh1'
    bindPoint: GRAPHICS
  ----------

  DrawMeshTasks

  EndRenderPass2
    attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> COPY
      access:  SHADER_SAMPLED_READ ---> TRANSFER_READ
      layout:  SHADER_READ_ONLY_OPTIMAL ---> TRANSFER_SRC_OPTIMAL
  ----------

}
--------------------------------------------------
name: 'DrawMesh1 |1| Readback task'
{
  CopyImageToBuffer
    src:       'Image'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [0, 1920000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    MemoryBarrier:
      stage:  COPY ---> HOST
      access: TRANSFER_WRITE ---> HOST_READ
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-0',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'DrawMesh1 |0| Draw task'
{

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'DrawTest.Draw_1'
    color attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BindPipeline
    pipeline:  'draw_mesh1'
    bindPoint: GRAPHICS
  ----------

  DrawMeshTasks

  EndRenderPass2
    attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> COPY
      access:  SHADER_SAMPLED_READ ---> TRANSFER_READ
      layout:  SHADER_READ_ONLY_OPTIMAL ---> TRANSFER_SRC_OPTIMAL
  ----------

}
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  CopyImageToBuffer
    src:       'Image'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [0, 1920000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    MemoryBarrier:
      stage:  COPY ---> HOST
      access: TRANSFER_WRITE ---> HOST_READ
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-1',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'IndirectCmdBuffers'
{

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'DrawTest.Draw_1'
    color attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BindPipeline
    pipeline:  'draw_mesh1'
    bindPoint: GRAPHICS
  ----------

  DrawMeshTasks

  EndRenderPass2
    attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> COPY
      access:  SHADER_SAMPLED_READ ---> TRANSFER_READ
      layout:  SHADER_READ_ONLY_OPTIMAL ---> TRANSFER_SRC_OPTIMAL
  ----------

}
--------------------------------------------------
name: 'DrawMesh1 |1| Readback task'
{
  CopyImageToBuffer
    src:       'Image'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [0, 1920000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    MemoryBarrier:
      stage:  COPY ---> HOST
      access: TRANSFER_WRITE ---> HOST_READ
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-2',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'IndirectCmdBuffers'
{

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'DrawTest.Draw_1'
    color attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BindPipeline
    pipeline:  'draw_mesh1'
    bindPoint: GRAPHICS
  ----------

  DrawMeshTasks

  EndRenderPass2
    attachment:
      view:    'ImageView'
      image:   'Image'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image'
      stage:   FRAGMENT_SHADER ---> COPY
      access:  SHADER_SAMPLED_READ ---> TRANSFER_READ
      layout:  SHADER_READ_ONLY_OPTIMAL ---> TRANSFER_SRC_OPTIMAL
  ----------

  CopyImageToBuffer
    src:       'Image'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [0, 1920000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    MemoryBarrier:
      stage:  COPY ---> HOST
      access: TRANSFER_WRITE ---> HOST_READ
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-3',  stage: ALL_COMMANDS
}
==================================================

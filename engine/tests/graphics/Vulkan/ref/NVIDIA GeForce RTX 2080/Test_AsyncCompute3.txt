==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'graphics batch |0| graphics task'
{
  BeginDebugLabel
    name:  'graphics batch |0| graphics task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'render-pass-3'
    color attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BeginDebugLabel
    name:  'graphics batch |0| graphics task - RP'
    depth: 2
  ----------

  Draw

  EndDebugLabel
    depth: 2
  ----------

  EndRenderPass2
    attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (release)
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-0',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
waitSemaphore = {
  'sync-0',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'compute batch |0| async compute task'
{
  BeginDebugLabel
    name:  'compute batch |0| async compute task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (acquire)
  ----------

  Dispatch
    descriptors:
      image: 'Image-0', layout: GENERAL
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-1',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'graphics batch |0| graphics task'
{
  BeginDebugLabel
    name:  'graphics batch |0| graphics task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'render-pass-3'
    color attachment:
      view:    'ImageView-1'
      image:   'Image-1'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BeginDebugLabel
    name:  'graphics batch |0| graphics task - RP'
    depth: 2
  ----------

  Draw

  EndDebugLabel
    depth: 2
  ----------

  EndRenderPass2
    attachment:
      view:    'ImageView-1'
      image:   'Image-1'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (release)
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-2',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
waitSemaphore = {
  'sync-2',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'compute batch |0| async compute task'
{
  BeginDebugLabel
    name:  'compute batch |0| async compute task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (acquire)
  ----------

  Dispatch
    descriptors:
      image: 'Image-1', layout: GENERAL
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-3',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
waitSemaphore = {
  'sync-1',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'graphics batch |0| graphics task'
{
  BeginDebugLabel
    name:  'graphics batch |0| graphics task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   COMPUTE_SHADER ---> FRAGMENT_SHADER
      access:  SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'render-pass-3'
    color attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BeginDebugLabel
    name:  'graphics batch |0| graphics task - RP'
    depth: 2
  ----------

  Draw

  EndDebugLabel
    depth: 2
  ----------

  EndRenderPass2
    attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (release)
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-4',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
waitSemaphore = {
  'sync-4',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'compute batch |0| async compute task'
{
  BeginDebugLabel
    name:  'compute batch |0| async compute task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (acquire)
  ----------

  Dispatch
    descriptors:
      image: 'Image-0', layout: GENERAL
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-5',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
name: 'copy task |0| Readback task'
{
  BeginDebugLabel
    name:  'copy task |0| Readback task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   COMPUTE_SHADER ---> COPY
      access:  SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> TRANSFER_READ
      layout:  GENERAL ---> TRANSFER_SRC_OPTIMAL
  ----------

  CopyImageToBuffer
    src:       'Image-0'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [0, 1920000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   COMPUTE_SHADER ---> COPY
      access:  SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> TRANSFER_READ
      layout:  GENERAL ---> TRANSFER_SRC_OPTIMAL
  ----------

  CopyImageToBuffer
    src:       'Image-1'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [1920000, 3840000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   COPY ---> ALL_COMMANDS
      access:  TRANSFER_READ ---> MEMORY_READ | MEMORY_WRITE
      layout:  TRANSFER_SRC_OPTIMAL ---> GENERAL
    ImageBarrier:
      name:    'Image-1'
      stage:   COPY ---> ALL_COMMANDS
      access:  TRANSFER_READ ---> MEMORY_READ | MEMORY_WRITE
      layout:  TRANSFER_SRC_OPTIMAL ---> GENERAL
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    MemoryBarrier:
      stage:  COMPUTE_SHADER | COPY ---> ALL_COMMANDS
      access: TRANSFER_WRITE | SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> HOST_READ | MEMORY_READ | MEMORY_WRITE
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-6',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  BeginDebugLabel
    name:  'graphics batch |0| graphics task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'render-pass-3'
    color attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BeginDebugLabel
    name:  'graphics batch |0| graphics task - RP'
    depth: 2
  ----------

  Draw

  EndDebugLabel
    depth: 2
  ----------

  EndRenderPass2
    attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (release)
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-7',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
waitSemaphore = {
  'sync-7',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  BeginDebugLabel
    name:  'compute batch |0| async compute task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (acquire)
  ----------

  Dispatch
    descriptors:
      image: 'Image-0', layout: GENERAL
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-8',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  BeginDebugLabel
    name:  'graphics batch |0| graphics task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   FRAGMENT_SHADER ---> FRAGMENT_SHADER
      access:  0 ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'render-pass-3'
    color attachment:
      view:    'ImageView-1'
      image:   'Image-1'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BeginDebugLabel
    name:  'graphics batch |0| graphics task - RP'
    depth: 2
  ----------

  Draw

  EndDebugLabel
    depth: 2
  ----------

  EndRenderPass2
    attachment:
      view:    'ImageView-1'
      image:   'Image-1'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (release)
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-9',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
waitSemaphore = {
  'sync-9',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  BeginDebugLabel
    name:  'compute batch |0| async compute task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (acquire)
  ----------

  Dispatch
    descriptors:
      image: 'Image-1', layout: GENERAL
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-10',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'Graphics', (0)
--------------------------------------------------
waitSemaphore = {
  'sync-8',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  BeginDebugLabel
    name:  'graphics batch |0| graphics task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   COMPUTE_SHADER ---> FRAGMENT_SHADER
      access:  SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> SHADER_SAMPLED_READ
      layout:  UNDEFINED ---> SHADER_READ_ONLY_OPTIMAL
  ----------

  BeginRenderPass2
    renderPass:  'render-pass-3'
    color attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  SHADER_READ_ONLY_OPTIMAL ---> COLOR_ATTACHMENT_OPTIMAL
      loadOp:  CLEAR
    dependency:
      subpass: External ---> 0
      stage:   FRAGMENT_SHADER ---> COLOR_ATTACHMENT_OUTPUT
      access:  SHADER_SAMPLED_READ ---> COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE
  ----------

  BeginDebugLabel
    name:  'graphics batch |0| graphics task - RP'
    depth: 2
  ----------

  Draw

  EndDebugLabel
    depth: 2
  ----------

  EndRenderPass2
    attachment:
      view:    'ImageView-0'
      image:   'Image-0'
      layout:  COLOR_ATTACHMENT_OPTIMAL ---> SHADER_READ_ONLY_OPTIMAL
      storeOp: STORE
    dependency:
      subpass: 0 ---> External
      stage:   COLOR_ATTACHMENT_OUTPUT ---> FRAGMENT_SHADER
      access:  COLOR_ATTACHMENT_READ | COLOR_ATTACHMENT_WRITE ---> SHADER_SAMPLED_READ
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (release)
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-11',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
waitSemaphore = {
  'sync-11',  stage: ALL_COMMANDS
}
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  BeginDebugLabel
    name:  'compute batch |0| async compute task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   FRAGMENT_SHADER ---> COMPUTE_SHADER
      access:  SHADER_SAMPLED_READ ---> SHADER_STORAGE_READ | SHADER_STORAGE_WRITE
      layout:  SHADER_READ_ONLY_OPTIMAL ---> GENERAL
      queue:   0 ---> 2  (acquire)
  ----------

  Dispatch
    descriptors:
      image: 'Image-0', layout: GENERAL
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-12',  stage: ALL_COMMANDS
}
==================================================
==================================================
Batch in queue: 'AsyncCompute', (2)
--------------------------------------------------
name: 'IndirectCmdBuffers'
{
  BeginDebugLabel
    name:  'copy task |0| Readback task'
    depth: 1
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   COMPUTE_SHADER ---> COPY
      access:  SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> TRANSFER_READ
      layout:  GENERAL ---> TRANSFER_SRC_OPTIMAL
  ----------

  CopyImageToBuffer
    src:       'Image-0'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [0, 1920000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-1'
      stage:   COMPUTE_SHADER ---> COPY
      access:  SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> TRANSFER_READ
      layout:  GENERAL ---> TRANSFER_SRC_OPTIMAL
  ----------

  CopyImageToBuffer
    src:       'Image-1'
    srcLayout: TRANSFER_SRC_OPTIMAL
    dst:       'dynamic staging buffer'
      copy { off:(0, 0, 0), ext:(800, 600, 1), mip:0, layers:[0, 1), COLOR } ---> { [1920000, 3840000) }
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    ImageBarrier:
      name:    'Image-0'
      stage:   COPY ---> ALL_COMMANDS
      access:  TRANSFER_READ ---> MEMORY_READ | MEMORY_WRITE
      layout:  TRANSFER_SRC_OPTIMAL ---> GENERAL
    ImageBarrier:
      name:    'Image-1'
      stage:   COPY ---> ALL_COMMANDS
      access:  TRANSFER_READ ---> MEMORY_READ | MEMORY_WRITE
      layout:  TRANSFER_SRC_OPTIMAL ---> GENERAL
  ----------

  PipelineBarrier2
    dependencyFlags: 0
    MemoryBarrier:
      stage:  COMPUTE_SHADER | COPY ---> ALL_COMMANDS
      access: TRANSFER_WRITE | SHADER_STORAGE_READ | SHADER_STORAGE_WRITE ---> HOST_READ | MEMORY_READ | MEMORY_WRITE
  ----------

  EndDebugLabel
    depth: 1
  ----------

}
--------------------------------------------------
signalSemaphore = {
  'sync-13',  stage: ALL_COMMANDS
}
==================================================

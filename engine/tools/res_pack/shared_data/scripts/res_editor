//E86B6B44
#include <vector>
#include <string>

using int8		= std::int8_t;
using uint8		= std::uint8_t;
using int16		= std::int16_t;
using uint16	= std::uint16_t;
using int		= std::int32_t;
using uint		= std::uint32_t;
using int64		= std::int64_t;
using uint64	= std::uint64_t;
using string	= std::string;

template <typename T>
struct RC;

template <typename T>
using array = std::vector<T>;

struct float3;
struct ECompareOp;
struct EResourceState;
struct EPipelineOpt;
struct DynamicDim;
struct FlightCamera;
struct ComputePass;
struct UnifiedGeometry_DrawMeshTasksIndirect;
struct float4;
struct ImageLoadOpFlags;
struct BaseController;
struct RectU;
struct DynamicFloat4;
struct ESurfaceFormat;
struct MipmapLevel;
struct uint3;
struct EPostprocess;
struct uint4;
struct ubyte4;
struct EReductionMode;
struct ESamplerUsage;
struct ESamplerYcbcrRange;
struct uint2;
struct RectI;
struct DynamicInt4;
struct EShader;
struct GeomSource;
struct ubyte2;
struct RectF;
struct UnifiedGeometry_DrawIndirect;
struct EShaderStages;
struct ESubgroupTypes;
struct FreeFPVCamera;
struct SphericalCube;
struct EGraphicsDeviceID;
struct ubyte3;
struct FPVCamera;
struct ESubgroupOperation;
struct Random_Normal4;
struct VideoImage;
struct RGBA32u;
struct Image;
struct Random_Normal1;
struct ScriptFlags;
struct Random_Normal2;
struct UnifiedGeometry_Draw;
struct UnifiedGeometry_DrawIndexedIndirectCount;
struct UnifiedGeometry_DrawMeshTasks;
struct short3;
struct UnifiedGeometry_DrawMeshTasksIndirectCount;
struct ESamplerYcbcrModelConversion;
struct UnifiedGeometry_DrawIndexed;
struct Random_Normal3;
struct DepthStencil;
struct TiledTerrainMode;
struct Random;
struct sbyte4;
struct RGBA8u;
struct Random_Binomial4;
struct short2;
struct EPrimitive;
struct EMipmapFilter;
struct sbyte2;
struct sbyte3;
struct EPixelFormat;
struct TiledTerrain;
struct ECullMode;
struct Random_Binomial3;
struct Buffer;
struct EFilter;
struct EPipelineDynamicState;
struct ELogicOp;
struct EBlendOp;
struct HSVColor;
struct Random_Binomial2;
struct RGBA32f;
struct short4;
struct EQueueMask;
struct MultiSamples;
struct bool3;
struct EFeature;
struct bool2;
struct Random_Binomial1;
struct Particles;
struct UnifiedGeometry_DrawIndexedIndirect;
struct int4;
struct IPass;
struct Scene;
struct ImageLayer;
struct int2;
struct bool4;
struct ESamplerChromaLocation;
struct int3;
struct UnifiedGeometry_DrawIndirectCount;
struct EImage;
struct EVertexType;
struct float2x3;
struct RGBA32i;
struct SceneGraphicsPass;
struct float2x4;
struct float4x2;
struct float2x2;
struct float4x4;
struct EAttachmentStoreOp;
struct EAddressMode;
struct EBorderColor;
struct EPolygonMode;
struct UnifiedGeometry;
struct EAttachmentLoadOp;
struct EImageType;
struct float3x3;
struct EDescSetUsage;
struct EVertexInputRate;
struct float4x3;
struct EVendorID;
struct Postprocess;
struct EPassFlags;
struct EShaderIO;
struct Collection;
struct Controller2D;
struct EImageAspect;
struct float2;
struct float3x4;
struct DbgViewFlags;
struct EStencilOp;
struct float3x2;
struct EBlendFactor;

struct EImageType
{
	EImageType () {}
	EImageType (uint) {}
	operator uint () const;
	static constexpr uint 1D = 1;
	static constexpr uint 1DArray = 2;
	static constexpr uint 2D = 3;
	static constexpr uint 2DArray = 4;
	static constexpr uint 2DMS = 5;
	static constexpr uint 2DMSArray = 6;
	static constexpr uint Cube = 7;
	static constexpr uint CubeArray = 8;
	static constexpr uint 3D = 9;
	static constexpr uint Buffer = 10;
	static constexpr uint Float = 16;
	static constexpr uint Half = 32;
	static constexpr uint SNorm = 48;
	static constexpr uint UNorm = 64;
	static constexpr uint Int = 80;
	static constexpr uint UInt = 96;
	static constexpr uint sRGB = 112;
	static constexpr uint Depth = 128;
	static constexpr uint Stencil = 144;
	static constexpr uint DepthStencil = 160;
	static constexpr uint Shadow = 256;
	static constexpr uint FImage1D = 17;
	static constexpr uint FImage2D = 19;
	static constexpr uint FImage2D_sRGB = 115;
	static constexpr uint FImage3D = 25;
	static constexpr uint FImage1DArray = 18;
	static constexpr uint FImage2DArray = 20;
	static constexpr uint FImageCube = 23;
	static constexpr uint FImageCubeArray = 24;
	static constexpr uint FImage2DMS = 21;
	static constexpr uint FImage2DMSArray = 22;
	static constexpr uint FImageBuffer = 26;
	static constexpr uint HImage1D = 33;
	static constexpr uint HImage2D = 35;
	static constexpr uint HImage3D = 41;
	static constexpr uint HImage1DArray = 34;
	static constexpr uint HImage2DArray = 36;
	static constexpr uint HImageCube = 39;
	static constexpr uint HImageCubeArray = 40;
	static constexpr uint HImage2DMS = 37;
	static constexpr uint HImage2DMSArray = 38;
	static constexpr uint HImageBuffer = 42;
	static constexpr uint Image1DShadow = 385;
	static constexpr uint Image2DShadow = 387;
	static constexpr uint Image1DArrayShadow = 386;
	static constexpr uint Image2DArrayShadow = 388;
	static constexpr uint ImageCubeShadow = 391;
	static constexpr uint ImageCubeArrayShadow = 392;
	static constexpr uint IImage1D = 81;
	static constexpr uint IImage2D = 83;
	static constexpr uint IImage3D = 89;
	static constexpr uint IImage1DArray = 82;
	static constexpr uint IImage2DArray = 84;
	static constexpr uint IImageCube = 87;
	static constexpr uint IImageCubeArray = 88;
	static constexpr uint IImage2DMS = 85;
	static constexpr uint IImage2DMSArray = 86;
	static constexpr uint IImageBuffer = 90;
	static constexpr uint UImage1D = 97;
	static constexpr uint UImage2D = 99;
	static constexpr uint UImage3D = 105;
	static constexpr uint UImage1DArray = 98;
	static constexpr uint UImage2DArray = 100;
	static constexpr uint UImageCube = 103;
	static constexpr uint UImageCubeArray = 104;
	static constexpr uint UImage2DMS = 101;
	static constexpr uint UImage2DMSArray = 102;
	static constexpr uint UImageBuffer = 106;
};

int  Abs (int);
int  Square (int);
int  Min (int, int);
int  Max (int, int);
int  Clamp (int, int, int);
int  IntLog2 (int);
int  BitScanReverse (int);
int  BitScanForward (int);
uint  BitCount (int);
bool  IsPowerOfTwo (int);
uint  Square (uint);
uint  Min (uint, uint);
uint  Max (uint, uint);
uint  Clamp (uint, uint, uint);
int  IntLog2 (uint);
int  BitScanReverse (uint);
int  BitScanForward (uint);
uint  BitCount (uint);
bool  IsPowerOfTwo (uint);
float  Abs (float);
float  Square (float);
float  Min (float, float);
float  Max (float, float);
float  Clamp (float, float, float);
float  Floor (float);
float  Ceil (float);
float  Trunc (float);
float  Fract (float);
float  Round (float);
float  Mod (float, float);
float  Wrap (float, float, float);
float  Sqrt (float);
float  Pow (float, float);
float  Ln (float);
float  Log (float, float);
float  Log2 (float);
float  Log10 (float);
float  Exp (float);
float  Exp2 (float);
float  Exp10 (float);
float  Sin (float);
float  SinH (float);
float  ASin (float);
float  Cos (float);
float  CosH (float);
float  ACos (float);
float  Tan (float);
float  TanH (float);
float  ATan (float, float);
float  Lerp (float, float, float);
struct bool2
{
	bool2 ();
	bool2 (const bool2&);
	bool2&  operator = (const bool2&);
	bool x;
	bool y;
	bool2 (bool);
	bool2 (const bool3 &);
	bool2 (const bool4 &);
	bool2 (bool, bool);
};

struct bool3
{
	bool3 ();
	bool3 (const bool3&);
	bool3&  operator = (const bool3&);
	bool x;
	bool y;
	bool z;
	bool3 (bool);
	bool3 (const bool2 &);
	bool3 (const bool4 &);
	bool3 (const bool2 &, bool);
	bool3 (bool, bool, bool);
};

struct bool4
{
	bool4 ();
	bool4 (const bool4&);
	bool4&  operator = (const bool4&);
	bool x;
	bool y;
	bool z;
	bool w;
	bool4 (bool);
	bool4 (const bool2 &);
	bool4 (const bool3 &);
	bool4 (const bool2 &, const bool2 &);
	bool4 (const bool3 &, bool);
	bool4 (bool, bool, bool, bool);
};

struct sbyte2
{
	sbyte2 ();
	sbyte2 (const sbyte2&);
	sbyte2&  operator = (const sbyte2&);
	int8 x;
	int8 y;
	sbyte2 (int8);
	sbyte2 (const sbyte3 &);
	sbyte2 (const sbyte4 &);
	sbyte2 (int8, int8);
};

struct sbyte3
{
	sbyte3 ();
	sbyte3 (const sbyte3&);
	sbyte3&  operator = (const sbyte3&);
	int8 x;
	int8 y;
	int8 z;
	sbyte3 (int8);
	sbyte3 (const sbyte2 &);
	sbyte3 (const sbyte4 &);
	sbyte3 (const sbyte2 &, int8);
	sbyte3 (int8, int8, int8);
};

struct sbyte4
{
	sbyte4 ();
	sbyte4 (const sbyte4&);
	sbyte4&  operator = (const sbyte4&);
	int8 x;
	int8 y;
	int8 z;
	int8 w;
	sbyte4 (int8);
	sbyte4 (const sbyte2 &);
	sbyte4 (const sbyte3 &);
	sbyte4 (const sbyte2 &, const sbyte2 &);
	sbyte4 (const sbyte3 &, int8);
	sbyte4 (int8, int8, int8, int8);
};

struct ubyte2
{
	ubyte2 ();
	ubyte2 (const ubyte2&);
	ubyte2&  operator = (const ubyte2&);
	uint8 x;
	uint8 y;
	ubyte2 (uint8);
	ubyte2 (const ubyte3 &);
	ubyte2 (const ubyte4 &);
	ubyte2 (uint8, uint8);
};

struct ubyte3
{
	ubyte3 ();
	ubyte3 (const ubyte3&);
	ubyte3&  operator = (const ubyte3&);
	uint8 x;
	uint8 y;
	uint8 z;
	ubyte3 (uint8);
	ubyte3 (const ubyte2 &);
	ubyte3 (const ubyte4 &);
	ubyte3 (const ubyte2 &, uint8);
	ubyte3 (uint8, uint8, uint8);
};

struct ubyte4
{
	ubyte4 ();
	ubyte4 (const ubyte4&);
	ubyte4&  operator = (const ubyte4&);
	uint8 x;
	uint8 y;
	uint8 z;
	uint8 w;
	ubyte4 (uint8);
	ubyte4 (const ubyte2 &);
	ubyte4 (const ubyte3 &);
	ubyte4 (const ubyte2 &, const ubyte2 &);
	ubyte4 (const ubyte3 &, uint8);
	ubyte4 (uint8, uint8, uint8, uint8);
};

struct short2
{
	short2 ();
	short2 (const short2&);
	short2&  operator = (const short2&);
	int16 x;
	int16 y;
	short2 (int16);
	short2 (const short3 &);
	short2 (const short4 &);
	short2 (int16, int16);
};

struct short3
{
	short3 ();
	short3 (const short3&);
	short3&  operator = (const short3&);
	int16 x;
	int16 y;
	int16 z;
	short3 (int16);
	short3 (const short2 &);
	short3 (const short4 &);
	short3 (const short2 &, int16);
	short3 (int16, int16, int16);
};

struct short4
{
	short4 ();
	short4 (const short4&);
	short4&  operator = (const short4&);
	int16 x;
	int16 y;
	int16 z;
	int16 w;
	short4 (int16);
	short4 (const short2 &);
	short4 (const short3 &);
	short4 (const short2 &, const short2 &);
	short4 (const short3 &, int16);
	short4 (int16, int16, int16, int16);
};

struct int2
{
	int2 ();
	int2 (const int2&);
	int2&  operator = (const int2&);
	int x;
	int y;
	int2 (int);
	int2 (const int3 &);
	int2 (const int4 &);
	int2 (int, int);
};

struct int3
{
	int3 ();
	int3 (const int3&);
	int3&  operator = (const int3&);
	int x;
	int y;
	int z;
	int3 (int);
	int3 (const int2 &);
	int3 (const int4 &);
	int3 (const int2 &, int);
	int3 (int, int, int);
};

struct int4
{
	int4 ();
	int4 (const int4&);
	int4&  operator = (const int4&);
	int x;
	int y;
	int z;
	int w;
	int4 (int);
	int4 (const int2 &);
	int4 (const int3 &);
	int4 (const int2 &, const int2 &);
	int4 (const int3 &, int);
	int4 (int, int, int, int);
};

struct uint2
{
	uint2 ();
	uint2 (const uint2&);
	uint2&  operator = (const uint2&);
	uint x;
	uint y;
	uint2 (uint);
	uint2 (const uint3 &);
	uint2 (const uint4 &);
	uint2 (uint, uint);
};

struct uint3
{
	uint3 ();
	uint3 (const uint3&);
	uint3&  operator = (const uint3&);
	uint x;
	uint y;
	uint z;
	uint3 (uint);
	uint3 (const uint2 &);
	uint3 (const uint4 &);
	uint3 (const uint2 &, uint);
	uint3 (uint, uint, uint);
};

struct uint4
{
	uint4 ();
	uint4 (const uint4&);
	uint4&  operator = (const uint4&);
	uint x;
	uint y;
	uint z;
	uint w;
	uint4 (uint);
	uint4 (const uint2 &);
	uint4 (const uint3 &);
	uint4 (const uint2 &, const uint2 &);
	uint4 (const uint3 &, uint);
	uint4 (uint, uint, uint, uint);
};

struct float2
{
	float2 ();
	float2 (const float2&);
	float2&  operator = (const float2&);
	float x;
	float y;
	float2 (float);
	float2 (const float3 &);
	float2 (const float4 &);
	float2 (float, float);
};

struct float3
{
	float3 ();
	float3 (const float3&);
	float3&  operator = (const float3&);
	float x;
	float y;
	float z;
	float3 (float);
	float3 (const float2 &);
	float3 (const float4 &);
	float3 (const float2 &, float);
	float3 (float, float, float);
};

struct float4
{
	float4 ();
	float4 (const float4&);
	float4&  operator = (const float4&);
	float x;
	float y;
	float z;
	float w;
	float4 (float);
	float4 (const float2 &);
	float4 (const float3 &);
	float4 (const float2 &, const float2 &);
	float4 (const float3 &, float);
	float4 (float, float, float, float);
};

bool  All (const bool2 &);
bool  Any (const bool2 &);
bool  All (const bool3 &);
bool  Any (const bool3 &);
bool  All (const bool4 &);
bool  Any (const bool4 &);
float3  Cross (const float3 &, const float3 &);
struct float2x2
{
	float2x2 ();
	float2x2 (const float2x2&);
	float2x2&  operator = (const float2x2&);
	float2x2 ();
	float2x2 (const float2x2 &);
	float2x2 (const float2 &, const float2 &);
};

struct float2x3
{
	float2x3 ();
	float2x3 (const float2x3&);
	float2x3&  operator = (const float2x3&);
	float2x3 ();
	float2x3 (const float2x3 &);
	float2x3 (const float3 &, const float3 &);
};

struct float2x4
{
	float2x4 ();
	float2x4 (const float2x4&);
	float2x4&  operator = (const float2x4&);
	float2x4 ();
	float2x4 (const float2x4 &);
	float2x4 (const float4 &, const float4 &);
};

struct float3x2
{
	float3x2 ();
	float3x2 (const float3x2&);
	float3x2&  operator = (const float3x2&);
	float3x2 ();
	float3x2 (const float3x2 &);
	float3x2 (const float2 &, const float2 &, const float2 &);
};

struct float3x3
{
	float3x3 ();
	float3x3 (const float3x3&);
	float3x3&  operator = (const float3x3&);
	float3x3 ();
	float3x3 (const float3x3 &);
	float3x3 (const float3 &, const float3 &, const float3 &);
};

struct float3x4
{
	float3x4 ();
	float3x4 (const float3x4&);
	float3x4&  operator = (const float3x4&);
	float3x4 ();
	float3x4 (const float3x4 &);
	float3x4 (const float4 &, const float4 &, const float4 &);
};

struct float4x2
{
	float4x2 ();
	float4x2 (const float4x2&);
	float4x2&  operator = (const float4x2&);
	float4x2 ();
	float4x2 (const float4x2 &);
	float4x2 (const float2 &, const float2 &, const float2 &, const float2 &);
};

struct float4x3
{
	float4x3 ();
	float4x3 (const float4x3&);
	float4x3&  operator = (const float4x3&);
	float4x3 ();
	float4x3 (const float4x3 &);
	float4x3 (const float3 &, const float3 &, const float3 &, const float3 &);
};

struct float4x4
{
	float4x4 ();
	float4x4 (const float4x4&);
	float4x4&  operator = (const float4x4&);
	float4x4 ();
	float4x4 (const float4x4 &);
	float4x4 (const float4 &, const float4 &, const float4 &, const float4 &);
};

struct RectI
{
	RectI ();
	RectI (const RectI&);
	RectI&  operator = (const RectI&);
	int left;
	int top;
	int right;
	int bottom;
	RectI (const RectI &);
	RectI (const int2 &);
	RectI (const int2 &, const int2 &);
	RectI (int, int);
	RectI (int, int, int, int);
};

struct RectU
{
	RectU ();
	RectU (const RectU&);
	RectU&  operator = (const RectU&);
	uint left;
	uint top;
	uint right;
	uint bottom;
	RectU (const RectU &);
	RectU (const uint2 &);
	RectU (const uint2 &, const uint2 &);
	RectU (uint, uint);
	RectU (uint, uint, uint, uint);
};

struct RectF
{
	RectF ();
	RectF (const RectF&);
	RectF&  operator = (const RectF&);
	float left;
	float top;
	float right;
	float bottom;
	RectF (const RectF &);
	RectF (const float2 &);
	RectF (const float2 &, const float2 &);
	RectF (float, float);
	RectF (float, float, float, float);
};

struct RGBA32f
{
	RGBA32f ();
	RGBA32f (const RGBA32f&);
	RGBA32f&  operator = (const RGBA32f&);
	RGBA32f (float);
	RGBA32f (float, float, float, float);
	float r;
	float g;
	float b;
	float a;
	RGBA32f (const HSVColor &, float);
	RGBA32f (const RGBA8u &);
	RGBA32f (const RGBA32u &);
};

struct RGBA32i
{
	RGBA32i ();
	RGBA32i (const RGBA32i&);
	RGBA32i&  operator = (const RGBA32i&);
	RGBA32i (int);
	RGBA32i (int, int, int, int);
	int r;
	int g;
	int b;
	int a;
	RGBA32i (const RGBA8u &);
	RGBA32i (const RGBA32u &);
};

struct RGBA32u
{
	RGBA32u ();
	RGBA32u (const RGBA32u&);
	RGBA32u&  operator = (const RGBA32u&);
	RGBA32u (uint);
	RGBA32u (uint, uint, uint, uint);
	uint r;
	uint g;
	uint b;
	uint a;
	RGBA32u (const RGBA8u &);
	RGBA32u (const RGBA32i &);
};

struct RGBA8u
{
	RGBA8u ();
	RGBA8u (const RGBA8u&);
	RGBA8u&  operator = (const RGBA8u&);
	RGBA8u (uint8);
	RGBA8u (uint8, uint8, uint8, uint8);
	uint8 r;
	uint8 g;
	uint8 b;
	uint8 a;
	RGBA8u (const RGBA32i &);
	RGBA8u (const RGBA32u &);
	RGBA8u (const RGBA32f &);
	RGBA8u  Lerp (const RGBA8u &, float);
};

struct HSVColor
{
	HSVColor ();
	HSVColor (const HSVColor&);
	HSVColor&  operator = (const HSVColor&);
	float h;
	float s;
	float v;
	HSVColor (float);
	HSVColor (float, float);
	HSVColor (float, float, float);
	HSVColor (const RGBA32f &);
};

struct DepthStencil
{
	DepthStencil ();
	DepthStencil (const DepthStencil&);
	DepthStencil&  operator = (const DepthStencil&);
	float depth;
	uint stencil;
	DepthStencil (float, int);
};

RGBA8u  asARGB (uint);
RGBA8u  asRGBA (uint);
void  LogError (const string &);
void  LogInfo (const string &);
void  LogDebug (const string &);
void  LogFatal (const string &);
void  Assert (bool);
void  Assert (bool, const string &);
struct Random_Binomial1
{
	Random_Binomial1 (const Random_Binomial1&);
};

struct Random_Binomial2
{
	Random_Binomial2 (const Random_Binomial2&);
};

struct Random_Binomial3
{
	Random_Binomial3 (const Random_Binomial3&);
};

struct Random_Binomial4
{
	Random_Binomial4 (const Random_Binomial4&);
};

struct Random_Normal1
{
	Random_Normal1 (const Random_Normal1&);
};

struct Random_Normal2
{
	Random_Normal2 (const Random_Normal2&);
};

struct Random_Normal3
{
	Random_Normal3 (const Random_Normal3&);
};

struct Random_Normal4
{
	Random_Normal4 (const Random_Normal4&);
};

struct Random
{
	Random ();
	Random (const Random&);
	Random&  operator = (const Random&);
	float  Uniform (float, float);
	float2  Uniform (const float2 &, const float2 &);
	float3  Uniform (const float3 &, const float3 &);
	float4  Uniform (const float4 &, const float4 &);
	int  Uniform (int, int);
	int2  Uniform (const int2 &, const int2 &);
	int3  Uniform (const int3 &, const int3 &);
	int4  Uniform (const int4 &, const int4 &);
	uint  Uniform (uint, uint);
	uint2  Uniform (const uint2 &, const uint2 &);
	uint3  Uniform (const uint3 &, const uint3 &);
	uint4  Uniform (const uint4 &, const uint4 &);
	RGBA32f  UniformColor ();
	bool  Bernoulli (float);
	bool2  Bernoulli2 (float);
	bool3  Bernoulli3 (float);
	bool4  Bernoulli4 (float);
	Random_Binomial1  Binomial (int, float);
	Random_Binomial2  Binomial2 (int, float);
	Random_Binomial3  Binomial3 (int, float);
	Random_Binomial4  Binomial4 (int, float);
	Random_Normal1  Normal (float, float);
	Random_Normal2  Normal2 (float, float);
	Random_Normal3  Normal3 (float, float);
	Random_Normal4  Normal4 (float, float);
};

struct EImage
{
	EImage () {}
	EImage (uint) {}
	operator uint () const;
	static constexpr uint 1D = 0;
	static constexpr uint 2D = 1;
	static constexpr uint 3D = 2;
	static constexpr uint 1DArray = 3;
	static constexpr uint 2DArray = 4;
	static constexpr uint Cube = 5;
	static constexpr uint CubeArray = 6;
};

struct EPixelFormat
{
	EPixelFormat () {}
	EPixelFormat (uint) {}
	operator uint () const;
	static constexpr uint RGBA16_SNorm = 0;
	static constexpr uint RGBA8_SNorm = 1;
	static constexpr uint RGB16_SNorm = 2;
	static constexpr uint RGB8_SNorm = 3;
	static constexpr uint RG16_SNorm = 4;
	static constexpr uint RG8_SNorm = 5;
	static constexpr uint R16_SNorm = 6;
	static constexpr uint R8_SNorm = 7;
	static constexpr uint RGBA16_UNorm = 8;
	static constexpr uint RGBA8_UNorm = 9;
	static constexpr uint RGB16_UNorm = 10;
	static constexpr uint RGB8_UNorm = 11;
	static constexpr uint RG16_UNorm = 12;
	static constexpr uint RG8_UNorm = 13;
	static constexpr uint R16_UNorm = 14;
	static constexpr uint R8_UNorm = 15;
	static constexpr uint RGB10_A2_UNorm = 16;
	static constexpr uint RGBA4_UNorm = 17;
	static constexpr uint RGB5_A1_UNorm = 18;
	static constexpr uint RGB_5_6_5_UNorm = 19;
	static constexpr uint BGR8_UNorm = 20;
	static constexpr uint BGRA8_UNorm = 21;
	static constexpr uint sRGB8 = 22;
	static constexpr uint sRGB8_A8 = 23;
	static constexpr uint sBGR8 = 24;
	static constexpr uint sBGR8_A8 = 25;
	static constexpr uint R8I = 26;
	static constexpr uint RG8I = 27;
	static constexpr uint RGB8I = 28;
	static constexpr uint RGBA8I = 29;
	static constexpr uint R16I = 30;
	static constexpr uint RG16I = 31;
	static constexpr uint RGB16I = 32;
	static constexpr uint RGBA16I = 33;
	static constexpr uint R32I = 34;
	static constexpr uint RG32I = 35;
	static constexpr uint RGB32I = 36;
	static constexpr uint RGBA32I = 37;
	static constexpr uint R64I = 38;
	static constexpr uint R8U = 39;
	static constexpr uint RG8U = 40;
	static constexpr uint RGB8U = 41;
	static constexpr uint RGBA8U = 42;
	static constexpr uint R16U = 43;
	static constexpr uint RG16U = 44;
	static constexpr uint RGB16U = 45;
	static constexpr uint RGBA16U = 46;
	static constexpr uint R32U = 47;
	static constexpr uint RG32U = 48;
	static constexpr uint RGB32U = 49;
	static constexpr uint RGBA32U = 50;
	static constexpr uint RGB10_A2U = 51;
	static constexpr uint R64U = 52;
	static constexpr uint R16F = 53;
	static constexpr uint RG16F = 54;
	static constexpr uint RGB16F = 55;
	static constexpr uint RGBA16F = 56;
	static constexpr uint R32F = 57;
	static constexpr uint RG32F = 58;
	static constexpr uint RGB32F = 59;
	static constexpr uint RGBA32F = 60;
	static constexpr uint RGB_11_11_10F = 61;
	static constexpr uint RGB_9F_E5 = 62;
	static constexpr uint Depth16 = 63;
	static constexpr uint Depth24 = 64;
	static constexpr uint Depth32F = 65;
	static constexpr uint Depth16_Stencil8 = 66;
	static constexpr uint Depth24_Stencil8 = 67;
	static constexpr uint Depth32F_Stencil8 = 68;
	static constexpr uint BC1_RGB8_UNorm = 69;
	static constexpr uint BC1_sRGB8 = 70;
	static constexpr uint BC1_RGB8_A1_UNorm = 71;
	static constexpr uint BC1_sRGB8_A1 = 72;
	static constexpr uint BC2_RGBA8_UNorm = 73;
	static constexpr uint BC2_sRGB8 = 74;
	static constexpr uint BC3_RGBA8_UNorm = 75;
	static constexpr uint BC3_sRGB8 = 76;
	static constexpr uint BC4_R8_SNorm = 77;
	static constexpr uint BC4_R8_UNorm = 78;
	static constexpr uint BC5_RG8_SNorm = 79;
	static constexpr uint BC5_RG8_UNorm = 80;
	static constexpr uint BC6H_RGB16F = 81;
	static constexpr uint BC6H_RGB16UF = 82;
	static constexpr uint BC7_RGBA8_UNorm = 83;
	static constexpr uint BC7_sRGB8_A8 = 84;
	static constexpr uint ETC2_RGB8_UNorm = 85;
	static constexpr uint ECT2_sRGB8 = 86;
	static constexpr uint ETC2_RGB8_A1_UNorm = 87;
	static constexpr uint ETC2_sRGB8_A1 = 88;
	static constexpr uint ETC2_RGBA8_UNorm = 89;
	static constexpr uint ETC2_sRGB8_A8 = 90;
	static constexpr uint EAC_R11_SNorm = 91;
	static constexpr uint EAC_R11_UNorm = 92;
	static constexpr uint EAC_RG11_SNorm = 93;
	static constexpr uint EAC_RG11_UNorm = 94;
	static constexpr uint ASTC_RGBA_4x4 = 95;
	static constexpr uint ASTC_RGBA_5x4 = 96;
	static constexpr uint ASTC_RGBA_5x5 = 97;
	static constexpr uint ASTC_RGBA_6x5 = 98;
	static constexpr uint ASTC_RGBA_6x6 = 99;
	static constexpr uint ASTC_RGBA_8x5 = 100;
	static constexpr uint ASTC_RGBA_8x6 = 101;
	static constexpr uint ASTC_RGBA_8x8 = 102;
	static constexpr uint ASTC_RGBA_10x5 = 103;
	static constexpr uint ASTC_RGBA_10x6 = 104;
	static constexpr uint ASTC_RGBA_10x8 = 105;
	static constexpr uint ASTC_RGBA_10x10 = 106;
	static constexpr uint ASTC_RGBA_12x10 = 107;
	static constexpr uint ASTC_RGBA_12x12 = 108;
	static constexpr uint ASTC_sRGB8_A8_4x4 = 109;
	static constexpr uint ASTC_sRGB8_A8_5x4 = 110;
	static constexpr uint ASTC_sRGB8_A8_5x5 = 111;
	static constexpr uint ASTC_sRGB8_A8_6x5 = 112;
	static constexpr uint ASTC_sRGB8_A8_6x6 = 113;
	static constexpr uint ASTC_sRGB8_A8_8x5 = 114;
	static constexpr uint ASTC_sRGB8_A8_8x6 = 115;
	static constexpr uint ASTC_sRGB8_A8_8x8 = 116;
	static constexpr uint ASTC_sRGB8_A8_10x5 = 117;
	static constexpr uint ASTC_sRGB8_A8_10x6 = 118;
	static constexpr uint ASTC_sRGB8_A8_10x8 = 119;
	static constexpr uint ASTC_sRGB8_A8_10x10 = 120;
	static constexpr uint ASTC_sRGB8_A8_12x10 = 121;
	static constexpr uint ASTC_sRGB8_A8_12x12 = 122;
	static constexpr uint ASTC_RGBA16F_4x4 = 123;
	static constexpr uint ASTC_RGBA16F_5x4 = 124;
	static constexpr uint ASTC_RGBA16F_5x5 = 125;
	static constexpr uint ASTC_RGBA16F_6x5 = 126;
	static constexpr uint ASTC_RGBA16F_6x6 = 127;
	static constexpr uint ASTC_RGBA16F_8x5 = 128;
	static constexpr uint ASTC_RGBA16F_8x6 = 129;
	static constexpr uint ASTC_RGBA16F_8x8 = 130;
	static constexpr uint ASTC_RGBA16F_10x5 = 131;
	static constexpr uint ASTC_RGBA16F_10x6 = 132;
	static constexpr uint ASTC_RGBA16F_10x8 = 133;
	static constexpr uint ASTC_RGBA16F_10x10 = 134;
	static constexpr uint ASTC_RGBA16F_12x10 = 135;
	static constexpr uint ASTC_RGBA16F_12x12 = 136;
	static constexpr uint G8B8G8R8_422_UNorm = 137;
	static constexpr uint B8G8R8G8_422_UNorm = 138;
	static constexpr uint G8_B8R8_420_UNorm = 139;
	static constexpr uint G8_B8R8_422_UNorm = 140;
	static constexpr uint G8_B8_R8_420_UNorm = 141;
	static constexpr uint G8_B8_R8_422_UNorm = 142;
	static constexpr uint G8_B8_R8_444_UNorm = 143;
	static constexpr uint B10x6G10x6R10x6G10x6_422_UNorm = 144;
	static constexpr uint G10x6B10x6G10x6R10x6_422_UNorm = 145;
	static constexpr uint G10x6_B10x6R10x6_420_UNorm = 146;
	static constexpr uint G10x6_B10x6R10x6_422_UNorm = 147;
	static constexpr uint G10x6_B10x6_R10x6_420_UNorm = 148;
	static constexpr uint G10x6_B10x6_R10x6_422_UNorm = 149;
	static constexpr uint G10x6_B10x6_R10x6_444_UNorm = 150;
	static constexpr uint R10x6G10x6B10x6A10x6_UNorm = 151;
	static constexpr uint R10x6G10x6_UNorm = 152;
	static constexpr uint R10x6_UNorm = 153;
	static constexpr uint B12x4G12x4R12x4G12x4_422_UNorm = 154;
	static constexpr uint G12x4B12x4G12x4R12x4_422_UNorm = 155;
	static constexpr uint G12x4_B12x4R12x4_420_UNorm = 156;
	static constexpr uint G12x4_B12x4R12x4_422_UNorm = 157;
	static constexpr uint G12x4_B12x4_R12x4_420_UNorm = 158;
	static constexpr uint G12x4_B12x4_R12x4_422_UNorm = 159;
	static constexpr uint G12x4_B12x4_R12x4_444_UNorm = 160;
	static constexpr uint R12x4G12x4B12x4A12x4_UNorm = 161;
	static constexpr uint R12x4G12x4_UNorm = 162;
	static constexpr uint R12x4_UNorm = 163;
	static constexpr uint B16G16R16G16_422_UNorm = 164;
	static constexpr uint G16B16G16R16_422_UNorm = 165;
	static constexpr uint G16_B16R16_420_UNorm = 166;
	static constexpr uint G16_B16R16_422_UNorm = 167;
	static constexpr uint G16_B16_R16_420_UNorm = 168;
	static constexpr uint G16_B16_R16_422_UNorm = 169;
	static constexpr uint G16_B16_R16_444_UNorm = 170;
	static constexpr uint SwapchainColor = 254;
};

struct EAttachmentLoadOp
{
	EAttachmentLoadOp () {}
	EAttachmentLoadOp (uint) {}
	operator uint () const;
	static constexpr uint Invalidate = 0;
	static constexpr uint Load = 1;
	static constexpr uint Clear = 2;
	static constexpr uint None = 3;
};

struct EAttachmentStoreOp
{
	EAttachmentStoreOp () {}
	EAttachmentStoreOp (uint) {}
	operator uint () const;
	static constexpr uint Invalidate = 0;
	static constexpr uint Store = 1;
	static constexpr uint None = 2;
};

struct ECompareOp
{
	ECompareOp () {}
	ECompareOp (uint) {}
	operator uint () const;
	static constexpr uint Never = 0;
	static constexpr uint Less = 1;
	static constexpr uint Equal = 2;
	static constexpr uint LEqual = 3;
	static constexpr uint Greater = 4;
	static constexpr uint NotEqual = 5;
	static constexpr uint GEqual = 6;
	static constexpr uint Always = 7;
};

struct EBlendFactor
{
	EBlendFactor () {}
	EBlendFactor (uint) {}
	operator uint () const;
	static constexpr uint Zero = 0;
	static constexpr uint One = 1;
	static constexpr uint SrcColor = 2;
	static constexpr uint OneMinusSrcColor = 3;
	static constexpr uint DstColor = 4;
	static constexpr uint OneMinusDstColor = 5;
	static constexpr uint SrcAlpha = 6;
	static constexpr uint OneMinusSrcAlpha = 7;
	static constexpr uint DstAlpha = 8;
	static constexpr uint OneMinusDstAlpha = 9;
	static constexpr uint ConstColor = 10;
	static constexpr uint OneMinusConstColor = 11;
	static constexpr uint ConstAlpha = 12;
	static constexpr uint OneMinusConstAlpha = 13;
	static constexpr uint SrcAlphaSaturate = 14;
	static constexpr uint Src1Color = 15;
	static constexpr uint OneMinusSrc1Color = 16;
	static constexpr uint Src1Alpha = 17;
	static constexpr uint OneMinusSrc1Alpha = 18;
};

struct EBlendOp
{
	EBlendOp () {}
	EBlendOp (uint) {}
	operator uint () const;
	static constexpr uint Add = 0;
	static constexpr uint Sub = 1;
	static constexpr uint RevSub = 2;
	static constexpr uint Min = 3;
	static constexpr uint Max = 4;
};

struct ELogicOp
{
	ELogicOp () {}
	ELogicOp (uint) {}
	operator uint () const;
	static constexpr uint None = 0;
	static constexpr uint Clear = 1;
	static constexpr uint Set = 2;
	static constexpr uint Copy = 3;
	static constexpr uint CopyInverted = 4;
	static constexpr uint NoOp = 5;
	static constexpr uint Invert = 6;
	static constexpr uint And = 7;
	static constexpr uint NotAnd = 8;
	static constexpr uint Or = 9;
	static constexpr uint NotOr = 10;
	static constexpr uint Xor = 11;
	static constexpr uint Equiv = 12;
	static constexpr uint AndReverse = 13;
	static constexpr uint AndInverted = 14;
	static constexpr uint OrReverse = 15;
	static constexpr uint OrInverted = 16;
};

struct EStencilOp
{
	EStencilOp () {}
	EStencilOp (uint) {}
	operator uint () const;
	static constexpr uint Keep = 0;
	static constexpr uint Zero = 1;
	static constexpr uint Replace = 2;
	static constexpr uint Incr = 3;
	static constexpr uint IncrWrap = 4;
	static constexpr uint Decr = 5;
	static constexpr uint DecrWrap = 6;
	static constexpr uint Invert = 7;
};

struct EPolygonMode
{
	EPolygonMode () {}
	EPolygonMode (uint) {}
	operator uint () const;
	static constexpr uint Point = 0;
	static constexpr uint Line = 1;
	static constexpr uint Fill = 2;
};

struct EPrimitive
{
	EPrimitive () {}
	EPrimitive (uint) {}
	operator uint () const;
	static constexpr uint Point = 0;
	static constexpr uint LineList = 1;
	static constexpr uint LineStrip = 2;
	static constexpr uint LineListAdjacency = 3;
	static constexpr uint LineStripAdjacency = 4;
	static constexpr uint TriangleList = 5;
	static constexpr uint TriangleStrip = 6;
	static constexpr uint TriangleFan = 7;
	static constexpr uint TriangleListAdjacency = 8;
	static constexpr uint TriangleStripAdjacency = 9;
	static constexpr uint Patch = 10;
};

struct ECullMode
{
	ECullMode () {}
	ECullMode (uint) {}
	operator uint () const;
	static constexpr uint None = 0;
	static constexpr uint Front = 1;
	static constexpr uint Back = 2;
	static constexpr uint FontAndBack = 3;
};

struct EPipelineDynamicState
{
	EPipelineDynamicState () {}
	EPipelineDynamicState (uint) {}
	operator uint () const;
	static constexpr uint None = 0;
	static constexpr uint StencilCompareMask = 1;
	static constexpr uint StencilWriteMask = 2;
	static constexpr uint StencilReference = 4;
	static constexpr uint DepthBias = 8;
	static constexpr uint BlendConstants = 16;
	static constexpr uint RTStackSize = 64;
};

struct EResourceState
{
	EResourceState () {}
	EResourceState (uint) {}
	operator uint () const;
	static constexpr uint Unknown = 0;
	static constexpr uint Preserve = 1;
	static constexpr uint ShaderStorage_Read = 2;
	static constexpr uint ShaderStorage_Write = 3;
	static constexpr uint ShaderStorage_RW = 4;
	static constexpr uint ShaderUniform = 5;
	static constexpr uint ShaderSample = 6;
	static constexpr uint CopySrc = 7;
	static constexpr uint CopyDst = 8;
	static constexpr uint ClearDst = 9;
	static constexpr uint BlitSrc = 10;
	static constexpr uint BlitDst = 11;
	static constexpr uint InputColorAttachment = 12;
	static constexpr uint InputColorAttachment_RW = 13;
	static constexpr uint ColorAttachment_Write = 14;
	static constexpr uint ColorAttachment_RW = 15;
	static constexpr uint DepthStencilAttachment_Read = 16;
	static constexpr uint DepthStencilAttachment_Write = 17;
	static constexpr uint DepthStencilAttachment_RW = 18;
	static constexpr uint DepthTest_StencilRW = 19;
	static constexpr uint DepthRW_StencilTest = 20;
	static constexpr uint DepthStencilTest_ShaderSample = 23;
	static constexpr uint DepthTest_DepthSample_StencilRW = 24;
	static constexpr uint InputDepthStencilAttachment = 21;
	static constexpr uint InputDepthStencilAttachment_RW = 22;
	static constexpr uint Host_Read = 25;
	static constexpr uint Host_Write = 26;
	static constexpr uint Host_RW = 27;
	static constexpr uint PresentImage = 28;
	static constexpr uint IndirectBuffer = 29;
	static constexpr uint IndexBuffer = 30;
	static constexpr uint VertexBuffer = 31;
	static constexpr uint ShadingRateImage = 40;
	static constexpr uint FragmentDensityMap = 41;
	static constexpr uint CopyRTAS_Read = 32;
	static constexpr uint CopyRTAS_Write = 33;
	static constexpr uint BuildRTAS_Read = 34;
	static constexpr uint BuildRTAS_Write = 35;
	static constexpr uint BuildRTAS_RW = 36;
	static constexpr uint BuildRTAS_ScratchBuffer = 37;
	static constexpr uint ShaderRTAS_Read = 38;
	static constexpr uint RTShaderBindingTable = 39;
	static constexpr uint DSTestBeforeFS = 256;
	static constexpr uint DSTestAfterFS = 512;
	static constexpr uint Invalidate = 1024;
	static constexpr uint General = 42;
	static constexpr uint PreRasterizationShaders = 2048;
	static constexpr uint TileShader = 4096;
	static constexpr uint FragmentShader = 8192;
	static constexpr uint PostRasterizationShaders = 12288;
	static constexpr uint ComputeShader = 16384;
	static constexpr uint RayTracingShaders = 32768;
	static constexpr uint AllGraphicsShaders = 14336;
	static constexpr uint AllShaders = 63488;
	static constexpr uint ColorAttachment = 15;
	static constexpr uint InputDepthAttachment = 21;
	static constexpr uint DepthStencilAttachment = 786;
};

struct EImageAspect
{
	EImageAspect () {}
	EImageAspect (uint) {}
	operator uint () const;
	static constexpr uint Color = 1;
	static constexpr uint Depth = 2;
	static constexpr uint Stencil = 4;
	static constexpr uint Plane_0 = 16;
	static constexpr uint Plane_1 = 32;
	static constexpr uint Plane_2 = 64;
};

struct EShaderIO
{
	EShaderIO () {}
	EShaderIO (uint) {}
	operator uint () const;
	static constexpr uint Int = 1;
	static constexpr uint UInt = 2;
	static constexpr uint Float = 3;
	static constexpr uint UFloat = 4;
	static constexpr uint Half = 5;
	static constexpr uint UNorm = 6;
	static constexpr uint SNorm = 7;
	static constexpr uint sRGB = 8;
	static constexpr uint AnyColor = 9;
	static constexpr uint Depth = 10;
	static constexpr uint Stencil = 11;
	static constexpr uint DepthStencil = 12;
};

struct ESubgroupTypes
{
	ESubgroupTypes () {}
	ESubgroupTypes (uint) {}
	operator uint () const;
	static constexpr uint Float16 = 32;
	static constexpr uint Float32 = 1;
	static constexpr uint Int8 = 4;
	static constexpr uint Int16 = 8;
	static constexpr uint Int32 = 2;
	static constexpr uint Int64 = 16;
};

struct ESubgroupOperation
{
	ESubgroupOperation () {}
	ESubgroupOperation (uint) {}
	operator uint () const;
	static constexpr uint IndexAndSize = 0;
	static constexpr uint Elect = 1;
	static constexpr uint Barrier = 2;
	static constexpr uint Any = 3;
	static constexpr uint All = 4;
	static constexpr uint AllEqual = 5;
	static constexpr uint Add = 6;
	static constexpr uint Mul = 7;
	static constexpr uint Min = 8;
	static constexpr uint Max = 9;
	static constexpr uint And = 10;
	static constexpr uint Or = 11;
	static constexpr uint Xor = 12;
	static constexpr uint InclusiveMul = 13;
	static constexpr uint InclusiveAdd = 14;
	static constexpr uint InclusiveMin = 15;
	static constexpr uint InclusiveMax = 16;
	static constexpr uint InclusiveAnd = 17;
	static constexpr uint InclusiveOr = 18;
	static constexpr uint InclusiveXor = 19;
	static constexpr uint ExclusiveAdd = 20;
	static constexpr uint ExclusiveMul = 21;
	static constexpr uint ExclusiveMin = 22;
	static constexpr uint ExclusiveMax = 23;
	static constexpr uint ExclusiveAnd = 24;
	static constexpr uint ExclusiveOr = 25;
	static constexpr uint ExclusiveXor = 26;
	static constexpr uint Ballot = 27;
	static constexpr uint Broadcast = 28;
	static constexpr uint BroadcastFirst = 29;
	static constexpr uint InverseBallot = 30;
	static constexpr uint BallotBitExtract = 31;
	static constexpr uint BallotBitCount = 32;
	static constexpr uint BallotInclusiveBitCount = 33;
	static constexpr uint BallotExclusiveBitCount = 34;
	static constexpr uint BallotFindLSB = 35;
	static constexpr uint BallotFindMSB = 36;
	static constexpr uint Shuffle = 37;
	static constexpr uint ShuffleXor = 38;
	static constexpr uint ShuffleUp = 39;
	static constexpr uint ShuffleDown = 40;
	static constexpr uint ClusteredAdd = 41;
	static constexpr uint ClusteredMul = 42;
	static constexpr uint ClusteredMin = 43;
	static constexpr uint ClusteredMax = 44;
	static constexpr uint ClusteredAnd = 45;
	static constexpr uint ClusteredOr = 46;
	static constexpr uint ClusteredXor = 47;
	static constexpr uint QuadBroadcast = 48;
	static constexpr uint QuadSwapHorizontal = 49;
	static constexpr uint QuadSwapVertical = 50;
	static constexpr uint QuadSwapDiagonal = 51;
	static constexpr uint _Basic_Begin = 0;
	static constexpr uint _Basic_End = 2;
	static constexpr uint _Vote_Begin = 3;
	static constexpr uint _Vote_End = 5;
	static constexpr uint _Arithmetic_Begin = 6;
	static constexpr uint _Arithmetic_End = 26;
	static constexpr uint _Ballot_Begin = 27;
	static constexpr uint _Ballot_End = 36;
	static constexpr uint _Shuffle_Begin = 37;
	static constexpr uint _Shuffle_End = 38;
	static constexpr uint _ShuffleRelative_Begin = 39;
	static constexpr uint _ShuffleRelative_End = 40;
	static constexpr uint _Clustered_Begin = 41;
	static constexpr uint _Clustered_End = 47;
	static constexpr uint _Quad_Begin = 48;
	static constexpr uint _Quad_End = 51;
};

struct EFeature
{
	EFeature () {}
	EFeature (uint) {}
	operator uint () const;
	static constexpr uint Ignore = 0;
	static constexpr uint RequireTrue = 2;
	static constexpr uint RequireFalse = 1;
};

struct EShader
{
	EShader () {}
	EShader (uint) {}
	operator uint () const;
	static constexpr uint Vertex = 0;
	static constexpr uint TessControl = 1;
	static constexpr uint TessEvaluation = 2;
	static constexpr uint Geometry = 3;
	static constexpr uint Fragment = 4;
	static constexpr uint Compute = 5;
	static constexpr uint Tile = 6;
	static constexpr uint MeshTask = 7;
	static constexpr uint Mesh = 8;
	static constexpr uint RayGen = 9;
	static constexpr uint RayAnyHit = 10;
	static constexpr uint RayClosestHit = 11;
	static constexpr uint RayMiss = 12;
	static constexpr uint RayIntersection = 13;
	static constexpr uint RayCallable = 14;
};

struct EShaderStages
{
	EShaderStages () {}
	EShaderStages (uint) {}
	operator uint () const;
	static constexpr uint Vertex = 1;
	static constexpr uint TessControl = 2;
	static constexpr uint TessEvaluation = 4;
	static constexpr uint Geometry = 8;
	static constexpr uint Fragment = 16;
	static constexpr uint Compute = 32;
	static constexpr uint Tile = 64;
	static constexpr uint MeshTask = 128;
	static constexpr uint Mesh = 256;
	static constexpr uint RayGen = 512;
	static constexpr uint RayAnyHit = 1024;
	static constexpr uint RayClosestHit = 2048;
	static constexpr uint RayMiss = 4096;
	static constexpr uint RayIntersection = 8192;
	static constexpr uint RayCallable = 16384;
	static constexpr uint All = 32767;
	static constexpr uint AllGraphics = 415;
	static constexpr uint AllRayTracing = 32256;
};

struct EVendorID
{
	EVendorID () {}
	EVendorID (uint) {}
	operator uint () const;
	static constexpr uint AMD = 0;
	static constexpr uint NVidia = 1;
	static constexpr uint Intel = 2;
	static constexpr uint ARM = 3;
	static constexpr uint Qualcomm = 4;
	static constexpr uint ImgTech = 5;
	static constexpr uint Microsoft = 6;
	static constexpr uint Apple = 7;
	static constexpr uint Mesa = 8;
	static constexpr uint Broadcom = 9;
	static constexpr uint Samsung = 10;
	static constexpr uint VeriSilicon = 11;
};

struct EVertexType
{
	EVertexType () {}
	EVertexType (uint) {}
	operator uint () const;
	static constexpr uint Byte = 4;
	static constexpr uint Byte2 = 5;
	static constexpr uint Byte3 = 6;
	static constexpr uint Byte4 = 7;
	static constexpr uint Byte_Norm = 68;
	static constexpr uint Byte2_Norm = 69;
	static constexpr uint Byte3_Norm = 70;
	static constexpr uint Byte4_Norm = 71;
	static constexpr uint Byte_Scaled = 132;
	static constexpr uint Byte2_Scaled = 133;
	static constexpr uint Byte3_Scaled = 134;
	static constexpr uint Byte4_Scaled = 135;
	static constexpr uint UByte = 8;
	static constexpr uint UByte2 = 9;
	static constexpr uint UByte3 = 10;
	static constexpr uint UByte4 = 11;
	static constexpr uint UByte_Norm = 72;
	static constexpr uint UByte2_Norm = 73;
	static constexpr uint UByte3_Norm = 74;
	static constexpr uint UByte4_Norm = 75;
	static constexpr uint UByte_Scaled = 136;
	static constexpr uint UByte2_Scaled = 137;
	static constexpr uint UByte3_Scaled = 138;
	static constexpr uint UByte4_Scaled = 139;
	static constexpr uint Short = 12;
	static constexpr uint Short2 = 13;
	static constexpr uint Short3 = 14;
	static constexpr uint Short4 = 15;
	static constexpr uint Short_Norm = 76;
	static constexpr uint Short2_Norm = 77;
	static constexpr uint Short3_Norm = 78;
	static constexpr uint Short4_Norm = 79;
	static constexpr uint Short_Scaled = 140;
	static constexpr uint Short2_Scaled = 141;
	static constexpr uint Short3_Scaled = 142;
	static constexpr uint Short4_Scaled = 143;
	static constexpr uint UShort = 16;
	static constexpr uint UShort2 = 17;
	static constexpr uint UShort3 = 18;
	static constexpr uint UShort4 = 19;
	static constexpr uint UShort_Norm = 80;
	static constexpr uint UShort2_Norm = 81;
	static constexpr uint UShort3_Norm = 82;
	static constexpr uint UShort4_Norm = 83;
	static constexpr uint UShort_Scaled = 144;
	static constexpr uint UShort2_Scaled = 145;
	static constexpr uint UShort3_Scaled = 146;
	static constexpr uint UShort4_Scaled = 147;
	static constexpr uint Int = 20;
	static constexpr uint Int2 = 21;
	static constexpr uint Int3 = 22;
	static constexpr uint Int4 = 23;
	static constexpr uint UInt = 24;
	static constexpr uint UInt2 = 25;
	static constexpr uint UInt3 = 26;
	static constexpr uint UInt4 = 27;
	static constexpr uint Long = 28;
	static constexpr uint Long2 = 29;
	static constexpr uint Long3 = 30;
	static constexpr uint Long4 = 31;
	static constexpr uint ULong = 32;
	static constexpr uint ULong2 = 33;
	static constexpr uint ULong3 = 34;
	static constexpr uint ULong4 = 35;
	static constexpr uint Half = 36;
	static constexpr uint Half2 = 37;
	static constexpr uint Half3 = 38;
	static constexpr uint Half4 = 39;
	static constexpr uint Float = 40;
	static constexpr uint Float2 = 41;
	static constexpr uint Float3 = 42;
	static constexpr uint Float4 = 43;
	static constexpr uint Double = 44;
	static constexpr uint Double2 = 45;
	static constexpr uint Double3 = 46;
	static constexpr uint Double4 = 47;
	static constexpr uint UInt_2_10_10_10 = 51;
	static constexpr uint UInt_2_10_10_10_Norm = 115;
	static constexpr uint UInt_2_10_10_10_Scaled = 179;
};

struct EGraphicsDeviceID
{
	EGraphicsDeviceID () {}
	EGraphicsDeviceID (uint) {}
	operator uint () const;
	static constexpr uint Adreno_500 = 0;
	static constexpr uint Adreno_600 = 1;
	static constexpr uint Adreno_600_QC4 = 2;
	static constexpr uint Adreno_600_OC4 = 3;
	static constexpr uint Adreno_600_QC5 = 4;
	static constexpr uint Adreno_700_SC3 = 5;
	static constexpr uint Adreno_700_DC4_SC5 = 6;
	static constexpr uint AMD_GCN1 = 7;
	static constexpr uint AMD_GCN2 = 8;
	static constexpr uint AMD_GCN3 = 9;
	static constexpr uint AMD_GCN4 = 10;
	static constexpr uint AMD_GCN5 = 11;
	static constexpr uint AMD_GCN5_APU = 12;
	static constexpr uint AMD_RDNA1 = 13;
	static constexpr uint AMD_RDNA2 = 14;
	static constexpr uint AMD_RDNA2_APU = 15;
	static constexpr uint AMD_RDNA3 = 16;
	static constexpr uint AMD_RDNA3_APU = 17;
	static constexpr uint Apple_A8 = 18;
	static constexpr uint Apple_A9_A10 = 19;
	static constexpr uint Apple_A11 = 20;
	static constexpr uint Apple_A12 = 21;
	static constexpr uint Apple_A13 = 22;
	static constexpr uint Apple_A14_M1 = 23;
	static constexpr uint Apple_A15_M2 = 24;
	static constexpr uint Apple_A16 = 25;
	static constexpr uint Mali_Midgard_Gen2 = 26;
	static constexpr uint Mali_Midgard_Gen3 = 27;
	static constexpr uint Mali_Midgard_Gen4 = 28;
	static constexpr uint Mali_Bifrost_Gen1 = 29;
	static constexpr uint Mali_Bifrost_Gen2 = 30;
	static constexpr uint Mali_Bifrost_Gen3 = 31;
	static constexpr uint Mali_Valhall_Gen1 = 32;
	static constexpr uint Mali_Valhall_Gen2 = 33;
	static constexpr uint Mali_Valhall_Gen3 = 34;
	static constexpr uint Mali_Valhall_Gen4 = 35;
	static constexpr uint NV_Maxwell = 36;
	static constexpr uint NV_Maxwell_Tegra = 37;
	static constexpr uint NV_Pascal = 38;
	static constexpr uint NV_Pascal_MX = 39;
	static constexpr uint NV_Pascal_Tegra = 40;
	static constexpr uint NV_Volta = 41;
	static constexpr uint NV_Turing_16 = 42;
	static constexpr uint NV_Turing = 43;
	static constexpr uint NV_Turing_MX = 44;
	static constexpr uint NV_Ampere = 45;
	static constexpr uint NV_Ampere_Orin = 46;
	static constexpr uint NV_Ada = 47;
	static constexpr uint Intel_Gen9 = 48;
	static constexpr uint Intel_Gen11 = 49;
	static constexpr uint Intel_Gen12 = 50;
	static constexpr uint PowerVR_Series8XE = 51;
	static constexpr uint PowerVR_Series8XEP = 52;
	static constexpr uint PowerVR_Series8XT = 53;
	static constexpr uint PowerVR_Series9XE = 54;
	static constexpr uint VeriSilicon = 55;
	static constexpr uint V3D_4 = 56;
	static constexpr uint SwiftShader = 57;
};

struct EFilter
{
	EFilter () {}
	EFilter (uint) {}
	operator uint () const;
	static constexpr uint Nearest = 0;
	static constexpr uint Linear = 1;
};

struct EMipmapFilter
{
	EMipmapFilter () {}
	EMipmapFilter (uint) {}
	operator uint () const;
	static constexpr uint None = 0;
	static constexpr uint Nearest = 1;
	static constexpr uint Linear = 2;
};

struct EAddressMode
{
	EAddressMode () {}
	EAddressMode (uint) {}
	operator uint () const;
	static constexpr uint Repeat = 0;
	static constexpr uint MirrorRepeat = 1;
	static constexpr uint ClampToEdge = 2;
	static constexpr uint ClampToBorder = 3;
	static constexpr uint MirrorClampToEdge = 4;
	static constexpr uint Clamp = 2;
	static constexpr uint MirrorClamp = 4;
};

struct EBorderColor
{
	EBorderColor () {}
	EBorderColor (uint) {}
	operator uint () const;
	static constexpr uint FloatTransparentBlack = 0;
	static constexpr uint FloatOpaqueBlack = 1;
	static constexpr uint FloatOpaqueWhite = 2;
	static constexpr uint IntTransparentBlack = 3;
	static constexpr uint IntOpaqueBlack = 4;
	static constexpr uint IntOpaqueWhite = 5;
};

struct EReductionMode
{
	EReductionMode () {}
	EReductionMode (uint) {}
	operator uint () const;
	static constexpr uint Average = 0;
	static constexpr uint Min = 1;
	static constexpr uint Max = 2;
};

struct ESamplerUsage
{
	ESamplerUsage () {}
	ESamplerUsage (uint) {}
	operator uint () const;
	static constexpr uint Default = 0;
	static constexpr uint Subsampled = 1;
	static constexpr uint SubsampledCoarseReconstruction = 2;
};

struct EVertexInputRate
{
	EVertexInputRate () {}
	EVertexInputRate (uint) {}
	operator uint () const;
	static constexpr uint Vertex = 0;
	static constexpr uint Instance = 1;
};

struct EDescSetUsage
{
	EDescSetUsage () {}
	EDescSetUsage (uint) {}
	operator uint () const;
	static constexpr uint AllowPartialyUpdate = 1;
	static constexpr uint UpdateTemplate = 2;
	static constexpr uint ArgumentBuffer = 4;
	static constexpr uint MutableArgBuffer = 8;
};

struct EPipelineOpt
{
	EPipelineOpt () {}
	EPipelineOpt (uint) {}
	operator uint () const;
	static constexpr uint Optimize = 1;
	static constexpr uint CS_DispatchBase = 2;
	static constexpr uint RT_NoNullAnyHitShaders = 4;
	static constexpr uint RT_NoNullClosestHitShaders = 8;
	static constexpr uint RT_NoNullMissShaders = 16;
	static constexpr uint RT_NoNullIntersectionShaders = 32;
	static constexpr uint RT_SkipTriangles = 64;
	static constexpr uint RT_SkipAABBs = 128;
};

struct EQueueMask
{
	EQueueMask () {}
	EQueueMask (uint) {}
	operator uint () const;
	static constexpr uint Graphics = 1;
	static constexpr uint AsyncCompute = 2;
	static constexpr uint AsyncTransfer = 4;
	static constexpr uint VideoEncode = 8;
	static constexpr uint VideoDecode = 16;
};

struct ESamplerChromaLocation
{
	ESamplerChromaLocation () {}
	ESamplerChromaLocation (uint) {}
	operator uint () const;
	static constexpr uint CositedEven = 0;
	static constexpr uint Midpoint = 1;
};

struct ESamplerYcbcrModelConversion
{
	ESamplerYcbcrModelConversion () {}
	ESamplerYcbcrModelConversion (uint) {}
	operator uint () const;
	static constexpr uint RGB_Identity = 0;
	static constexpr uint Ycbcr_Identity = 1;
	static constexpr uint Ycbcr_709 = 2;
	static constexpr uint Ycbcr_601 = 3;
	static constexpr uint Ycbcr_2020 = 4;
};

struct ESamplerYcbcrRange
{
	ESamplerYcbcrRange () {}
	ESamplerYcbcrRange (uint) {}
	operator uint () const;
	static constexpr uint ITU_Full = 0;
	static constexpr uint ITU_Narrow = 1;
};

struct ESurfaceFormat
{
	ESurfaceFormat () {}
	ESurfaceFormat (uint) {}
	operator uint () const;
	static constexpr uint BGRA8_sRGB_nonlinear = 0;
	static constexpr uint RGBA8_sRGB_nonlinear = 1;
	static constexpr uint BGRA8_BT709_nonlinear = 2;
	static constexpr uint RGBA16F_Extended_sRGB_linear = 3;
	static constexpr uint RGBA16F_sRGB_nonlinear = 4;
	static constexpr uint RGBA16F_BT709_nonlinear = 5;
	static constexpr uint RGBA16F_HDR10_ST2084 = 6;
	static constexpr uint RGBA16F_BT2020_linear = 7;
	static constexpr uint RGB10A2_sRGB_nonlinear = 8;
	static constexpr uint RGB10A2_HDR10_ST2084 = 9;
};

struct MultiSamples
{
	MultiSamples ();
	MultiSamples (const MultiSamples&);
	MultiSamples&  operator = (const MultiSamples&);
	MultiSamples (uint);
};

struct ImageLayer
{
	ImageLayer ();
	ImageLayer (const ImageLayer&);
	ImageLayer&  operator = (const ImageLayer&);
	ImageLayer (uint);
};

struct MipmapLevel
{
	MipmapLevel ();
	MipmapLevel (const MipmapLevel&);
	MipmapLevel&  operator = (const MipmapLevel&);
	MipmapLevel (uint);
};

struct DbgViewFlags
{
	DbgViewFlags () {}
	DbgViewFlags (uint) {}
	operator uint () const;
	static constexpr uint NoCopy = 1;
	static constexpr uint None = 0;
	static constexpr uint Histogram = 2;
};

struct ScriptFlags
{
	ScriptFlags () {}
	ScriptFlags (uint) {}
	operator uint () const;
	static constexpr uint RunOnce = 1;
	static constexpr uint OnRequest = 2;
};

struct DynamicDim
{
	DynamicDim ();
	RC<DynamicDim>  opMul (int) const;
	RC<DynamicDim>  opDiv (int) const;
	RC<DynamicDim>  Mul (int) const;
	RC<DynamicDim>  Div (int) const;
	RC<DynamicDim>  DivRound (int) const;
	RC<DynamicDim>  DivCeil (int) const;
	RC<DynamicDim>  opMul (const int2 &) const;
	RC<DynamicDim>  opDiv (const int2 &) const;
	RC<DynamicDim>  Mul (const int2 &) const;
	RC<DynamicDim>  Div (const int2 &) const;
	RC<DynamicDim>  DivRound (const int2 &) const;
	RC<DynamicDim>  DivCeil (const int2 &) const;
	RC<DynamicDim>  opMul (const int3 &) const;
	RC<DynamicDim>  opDiv (const int3 &) const;
	RC<DynamicDim>  Mul (const int3 &) const;
	RC<DynamicDim>  Div (const int3 &) const;
	RC<DynamicDim>  DivRound (const int3 &) const;
	RC<DynamicDim>  DivCeil (const int3 &) const;
};

struct DynamicInt4
{
	DynamicInt4 ();
};

struct DynamicFloat4
{
	DynamicFloat4 ();
};

struct ImageLoadOpFlags
{
	ImageLoadOpFlags () {}
	ImageLoadOpFlags (uint) {}
	operator uint () const;
	static constexpr uint GenMipmaps = 1;
};

struct Image
{
	Image ();
	Image (EImageType, const string &);
	Image (EPixelFormat, const uint2 &);
	Image (EPixelFormat, const uint3 &);
	Image (EPixelFormat, const uint2 &, const ImageLayer &);
	Image (EPixelFormat, const uint2 &, const MipmapLevel &);
	Image (EPixelFormat, const uint3 &, const MipmapLevel &);
	Image (EPixelFormat, const uint2 &, const ImageLayer &, const MipmapLevel &);
	Image (EPixelFormat, const RC<DynamicDim> &);
	Image (EPixelFormat, const RC<DynamicDim> &, const ImageLayer &);
	Image (EPixelFormat, const RC<DynamicDim> &, const MipmapLevel &);
	Image (EPixelFormat, const RC<DynamicDim> &, const ImageLayer &, const MipmapLevel &);
	void  Name (const string &);
	void  LoadLayer (const string &, uint);
	void  LoadLayer (const string &, uint, ImageLoadOpFlags);
	void  LoadLayer (const string &, uint, uint);
	bool  IsMutableDimension ();
	uint2  Dimension2 ();
	uint3  Dimension2_Layers ();
	uint3  Dimension3 ();
	RC<DynamicDim>  Dimension ();
	uint  ArrayLayers ();
	uint  MipmapCount ();
	RC<Image>  CreateView (EImage, const MipmapLevel &, uint, const ImageLayer &, uint);
	RC<Image>  CreateView (EImage);
	RC<Image>  CreateView (EImage, const MipmapLevel &, uint);
	RC<Image>  CreateView (EImage, const ImageLayer &, uint);
};

struct VideoImage
{
	VideoImage ();
	VideoImage (const string &);
	VideoImage (EPixelFormat, const string &);
	void  Name (const string &);
	RC<DynamicDim>  Dimension ();
};

struct Buffer
{
	Buffer ();
	Buffer (uint);
	Buffer (const string &);
	void  Name (const string &);
	void  Layout (const string &, uint64);
	void  Layout (const string &);
	void  Float (const string &, float);
	void  Float2 (const string &, float, float);
	void  Float3 (const string &, float, float, float);
	void  Float4 (const string &, float, float, float, float);
	void  Float2 (const string &, const float2 &);
	void  Float3 (const string &, const float3 &);
	void  Float4 (const string &, const float4 &);
	void  Float2x2 (const string &, const float2x2 &);
	void  Float2x3 (const string &, const float2x3 &);
	void  Float2x4 (const string &, const float2x4 &);
	void  Float3x2 (const string &, const float3x2 &);
	void  Float3x3 (const string &, const float3x3 &);
	void  Float3x4 (const string &, const float3x4 &);
	void  Float4x2 (const string &, const float4x2 &);
	void  Float4x3 (const string &, const float4x3 &);
	void  Float4x4 (const string &, const float4x4 &);
	void  Int (const string &, int);
	void  Int2 (const string &, int, int);
	void  Int3 (const string &, int, int, int);
	void  Int4 (const string &, int, int, int, int);
	void  Int2 (const string &, const int2 &);
	void  Int3 (const string &, const int3 &);
	void  Int4 (const string &, const int4 &);
	void  Uint (const string &, uint);
	void  Uint2 (const string &, uint, uint);
	void  Uint3 (const string &, uint, uint, uint);
	void  Uint4 (const string &, uint, uint, uint, uint);
	void  Uint2 (const string &, const uint2 &);
	void  Uint3 (const string &, const uint3 &);
	void  Uint4 (const string &, const uint4 &);
	void  Float1Array (const string &, const array<float> &);
	void  Float2Array (const string &, const array<float2> &);
	void  Float3Array (const string &, const array<float3> &);
	void  Float4Array (const string &, const array<float4> &);
	void  Float2x2Array (const string &, const array<float2x2> &);
	void  Float2x3Array (const string &, const array<float2x3> &);
	void  Float2x4Array (const string &, const array<float2x4> &);
	void  Float3x2Array (const string &, const array<float3x2> &);
	void  Float3x3Array (const string &, const array<float3x3> &);
	void  Float3x4Array (const string &, const array<float3x4> &);
	void  Float4x2Array (const string &, const array<float4x2> &);
	void  Float4x3Array (const string &, const array<float4x3> &);
	void  Float4x4Array (const string &, const array<float4x4> &);
	void  Int1Array (const string &, const array<int> &);
	void  Int2Array (const string &, const array<int2> &);
	void  Int3Array (const string &, const array<int3> &);
	void  Int4Array (const string &, const array<int4> &);
	void  UInt1Array (const string &, const array<uint> &);
	void  UInt2Array (const string &, const array<uint2> &);
	void  UInt3Array (const string &, const array<uint3> &);
	void  UInt4Array (const string &, const array<uint4> &);
};

struct BaseController
{
};

struct Controller2D
{
	Controller2D ();
};

struct FlightCamera
{
	FlightCamera ();
	void  FovY (float);
	void  ClipPlanes (float, float);
	void  RotationScale (float);
	void  RotationScale (float, float, float);
	void  Position (const float3 &);
	void  EngineThrust (float, float);
};

struct FPVCamera
{
	FPVCamera ();
	void  FovY (float);
	void  ClipPlanes (float, float);
	void  ForwardBackwardScale (float);
	void  ForwardBackwardScale (float, float);
	void  UpDownScale (float);
	void  UpDownScale (float, float);
	void  SideMovementScale (float);
	void  RotationScale (float);
	void  RotationScale (float, float);
	void  Position (const float3 &);
};

struct FreeFPVCamera
{
	FreeFPVCamera ();
	void  FovY (float);
	void  ClipPlanes (float, float);
	void  ForwardBackwardScale (float);
	void  ForwardBackwardScale (float, float);
	void  UpDownScale (float);
	void  UpDownScale (float, float);
	void  SideMovementScale (float);
	void  RotationScale (float);
	void  RotationScale (float, float);
	void  Position (const float3 &);
};

struct IPass
{
};

struct GeomSource
{
};

struct TiledTerrainMode
{
	TiledTerrainMode () {}
	TiledTerrainMode (uint) {}
	operator uint () const;
	static constexpr uint Tile2D = 0;
	static constexpr uint Chunk3D = 1;
};

struct TiledTerrain
{
	TiledTerrain ();
	TiledTerrain (TiledTerrainMode);
	TiledTerrain (TiledTerrainMode, const RC<DynamicFloat4> &);
	void  Generator (const RC<IPass> &);
	void  Layer (const string &, const RC<Image> &);
	void  GridSize (uint);
	RC<DynamicFloat4>  DynamicRegion ();
};

struct SphericalCube
{
	SphericalCube ();
	void  AddTexture (const string &, const RC<Image> &);
	void  AddTexture (const string &, const RC<Image> &, const string &);
	void  DetailLevel (uint);
	void  DetailLevel (uint, uint);
};

struct Particles
{
	Particles ();
	RC<Buffer>  Buffer ();
	RC<DynamicDim>  ParticleCount ();
	void  ParticleCount (uint);
};

struct UnifiedGeometry_Draw
{
	UnifiedGeometry_Draw ();
	UnifiedGeometry_Draw (const UnifiedGeometry_Draw&);
	UnifiedGeometry_Draw&  operator = (const UnifiedGeometry_Draw&);
	uint vertexCount;
	uint instanceCount;
	uint firstVertex;
	uint firstInstance;
};

struct UnifiedGeometry_DrawIndexed
{
	UnifiedGeometry_DrawIndexed ();
	UnifiedGeometry_DrawIndexed (const UnifiedGeometry_DrawIndexed&);
	UnifiedGeometry_DrawIndexed&  operator = (const UnifiedGeometry_DrawIndexed&);
	uint indexCount;
	uint instanceCount;
	uint firstIndex;
	int vertexOffset;
	uint firstInstance;
};

struct UnifiedGeometry_DrawIndirect
{
	UnifiedGeometry_DrawIndirect ();
	UnifiedGeometry_DrawIndirect (const UnifiedGeometry_DrawIndirect&);
	UnifiedGeometry_DrawIndirect&  operator = (const UnifiedGeometry_DrawIndirect&);
	Buffer@ indirectBuffer;
	uint64 indirectBufferOffset;
	uint drawCount;
	uint stride;
};

struct UnifiedGeometry_DrawIndexedIndirect
{
	UnifiedGeometry_DrawIndexedIndirect ();
	UnifiedGeometry_DrawIndexedIndirect (const UnifiedGeometry_DrawIndexedIndirect&);
	UnifiedGeometry_DrawIndexedIndirect&  operator = (const UnifiedGeometry_DrawIndexedIndirect&);
	Buffer@ indirectBuffer;
	uint64 indirectBufferOffset;
	uint drawCount;
	uint stride;
};

struct UnifiedGeometry_DrawMeshTasks
{
	UnifiedGeometry_DrawMeshTasks ();
	UnifiedGeometry_DrawMeshTasks (const UnifiedGeometry_DrawMeshTasks&);
	UnifiedGeometry_DrawMeshTasks&  operator = (const UnifiedGeometry_DrawMeshTasks&);
	uint taskCountX;
	uint taskCountY;
	uint taskCountZ;
};

struct UnifiedGeometry_DrawMeshTasksIndirect
{
	UnifiedGeometry_DrawMeshTasksIndirect ();
	UnifiedGeometry_DrawMeshTasksIndirect (const UnifiedGeometry_DrawMeshTasksIndirect&);
	UnifiedGeometry_DrawMeshTasksIndirect&  operator = (const UnifiedGeometry_DrawMeshTasksIndirect&);
	Buffer@ indirectBuffer;
	uint64 indirectBufferOffset;
	uint drawCount;
	uint stride;
};

struct UnifiedGeometry_DrawIndirectCount
{
	UnifiedGeometry_DrawIndirectCount ();
	UnifiedGeometry_DrawIndirectCount (const UnifiedGeometry_DrawIndirectCount&);
	UnifiedGeometry_DrawIndirectCount&  operator = (const UnifiedGeometry_DrawIndirectCount&);
	Buffer@ indirectBuffer;
	uint64 indirectBufferOffset;
	Buffer@ countBuffer;
	uint64 countBufferOffset;
	uint maxDrawCount;
	uint stride;
};

struct UnifiedGeometry_DrawIndexedIndirectCount
{
	UnifiedGeometry_DrawIndexedIndirectCount ();
	UnifiedGeometry_DrawIndexedIndirectCount (const UnifiedGeometry_DrawIndexedIndirectCount&);
	UnifiedGeometry_DrawIndexedIndirectCount&  operator = (const UnifiedGeometry_DrawIndexedIndirectCount&);
	Buffer@ indirectBuffer;
	uint64 indirectBufferOffset;
	Buffer@ countBuffer;
	uint64 countBufferOffset;
	uint maxDrawCount;
	uint stride;
};

struct UnifiedGeometry_DrawMeshTasksIndirectCount
{
	UnifiedGeometry_DrawMeshTasksIndirectCount ();
	UnifiedGeometry_DrawMeshTasksIndirectCount (const UnifiedGeometry_DrawMeshTasksIndirectCount&);
	UnifiedGeometry_DrawMeshTasksIndirectCount&  operator = (const UnifiedGeometry_DrawMeshTasksIndirectCount&);
	Buffer@ indirectBuffer;
	uint64 indirectBufferOffset;
	Buffer@ countBuffer;
	uint64 countBufferOffset;
	uint maxDrawCount;
	uint stride;
};

struct UnifiedGeometry
{
	UnifiedGeometry ();
	void  Buffer (const string &, const RC<Buffer> &);
	void  Texture (const string &, const RC<Image> &);
	void  Draw (const UnifiedGeometry_Draw &);
	void  Draw (const UnifiedGeometry_DrawIndexed &);
	void  Draw (const UnifiedGeometry_DrawIndirect &);
	void  Draw (const UnifiedGeometry_DrawIndexedIndirect &);
	void  Draw (const UnifiedGeometry_DrawMeshTasks &);
	void  Draw (const UnifiedGeometry_DrawMeshTasksIndirect &);
	void  Draw (const UnifiedGeometry_DrawIndirectCount &);
	void  Draw (const UnifiedGeometry_DrawIndexedIndirectCount &);
	void  Draw (const UnifiedGeometry_DrawMeshTasksIndirectCount &);
};

struct Collection
{
	Collection ();
	void  Add (const string &, const RC<DynamicDim> &);
	void  Add (const string &, const RC<DynamicInt4> &);
	void  Add (const string &, const RC<DynamicFloat4> &);
	void  Add (const string &, const RC<Image> &);
	void  Add (const string &, const RC<VideoImage> &);
	void  Add (const string &, const RC<Buffer> &);
	void  Add (const string &, const RC<GeomSource> &);
	void  Add (const string &, const RC<BaseController> &);
	RC<DynamicDim>  DynDim (const string &) const;
	RC<DynamicInt4>  DynInt4 (const string &) const;
	RC<DynamicFloat4>  DynFloat4 (const string &) const;
	RC<Image>  Image (const string &) const;
	RC<VideoImage>  VideoImage (const string &) const;
	RC<Buffer>  Buffer (const string &) const;
	RC<GeomSource>  Geometry (const string &) const;
	RC<BaseController>  Controller (const string &) const;
};

struct EPostprocess
{
	EPostprocess () {}
	EPostprocess (uint) {}
	operator uint () const;
	static constexpr uint None = 0;
	static constexpr uint Shadertoy = 1;
	static constexpr uint ShadertoyVR = 2;
	static constexpr uint ShadertoyVR_180 = 4;
	static constexpr uint ShadertoyVR_360 = 8;
	static constexpr uint Shadertoy_360 = 16;
};

struct EPassFlags
{
	EPassFlags () {}
	EPassFlags (uint) {}
	operator uint () const;
	static constexpr uint None = 0;
	static constexpr uint Enable_ShaderTrace = 1;
	static constexpr uint Enable_ShaderFnProf = 2;
	static constexpr uint Enable_ShaderTmProf = 4;
	static constexpr uint Enable_AllShaderDbg = 7;
};

struct Postprocess
{
	Postprocess ();
	void  SetDebugLabel (const string &);
	void  SetDebugLabel (const string &, const RGBA8u &);
	void  SliderI (const string &);
	void  Slider (const string &, int, int);
	void  Slider (const string &, const int2 &, const int2 &);
	void  Slider (const string &, const int3 &, const int3 &);
	void  Slider (const string &, const int4 &, const int4 &);
	void  Slider (const string &);
	void  Slider (const string &, float, float);
	void  Slider (const string &, const float2 &, const float2 &);
	void  Slider (const string &, const float3 &, const float3 &);
	void  Slider (const string &, const float4 &, const float4 &);
	void  ColorSelector (const string &);
	void  Constant (const string &, const RC<DynamicFloat4> &);
	void  Constant (const string &, const RC<DynamicInt4> &);
	void  Output (const RC<Image> &);
	void  Output (const RC<Image> &, const MipmapLevel &);
	void  Output (const RC<Image> &, const ImageLayer &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &);
	void  Output (const RC<Image> &, const RGBA32f &);
	void  Output (const RC<Image> &, const MipmapLevel &, const RGBA32f &);
	void  Output (const RC<Image> &, const ImageLayer &, const RGBA32f &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32f &);
	void  Output (const RC<Image> &, const RGBA32u &);
	void  Output (const RC<Image> &, const MipmapLevel &, const RGBA32u &);
	void  Output (const RC<Image> &, const ImageLayer &, const RGBA32u &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32u &);
	void  Output (const RC<Image> &, const RGBA32i &);
	void  Output (const RC<Image> &, const MipmapLevel &, const RGBA32i &);
	void  Output (const RC<Image> &, const ImageLayer &, const RGBA32i &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32i &);
	void  Output (const RC<Image> &, const DepthStencil &);
	void  Output (const RC<Image> &, const MipmapLevel &, const DepthStencil &);
	void  Output (const RC<Image> &, const ImageLayer &, const DepthStencil &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &);
	void  Output (const string &, const RC<Image> &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const DepthStencil &);
	void  OutputBlend (const RC<Image> &, EBlendFactor, EBlendFactor, EBlendOp);
	void  OutputBlend (const string &, const RC<Image> &, EBlendFactor, EBlendFactor, EBlendOp);
	Postprocess (const string &);
	Postprocess (const string &, EPostprocess);
	Postprocess (EPostprocess);
	Postprocess (EPostprocess, const string &);
	Postprocess (EPostprocess, EPassFlags);
	Postprocess (EPostprocess, const string &, EPassFlags);
	Postprocess (const string &, EPostprocess, EPassFlags);
	Postprocess (const string &, EPostprocess, const string &, EPassFlags);
	void  Input (const string &, const RC<Buffer> &);
	void  Input (const string &, const RC<Image> &, const string &);
	void  Input (const string &, const RC<VideoImage> &, const string &);
	void  Input (const RC<BaseController> &);
};

struct ComputePass
{
	void  SetDebugLabel (const string &);
	void  SetDebugLabel (const string &, const RGBA8u &);
	void  SliderI (const string &);
	void  Slider (const string &, int, int);
	void  Slider (const string &, const int2 &, const int2 &);
	void  Slider (const string &, const int3 &, const int3 &);
	void  Slider (const string &, const int4 &, const int4 &);
	void  Slider (const string &);
	void  Slider (const string &, float, float);
	void  Slider (const string &, const float2 &, const float2 &);
	void  Slider (const string &, const float3 &, const float3 &);
	void  Slider (const string &, const float4 &, const float4 &);
	void  ColorSelector (const string &);
	void  Constant (const string &, const RC<DynamicFloat4> &);
	void  Constant (const string &, const RC<DynamicInt4> &);
	ComputePass  ();
	ComputePass (const string &);
	ComputePass (const string &, const string &);
	ComputePass (const string &, EPassFlags);
	ComputePass (const string &, const string &, EPassFlags);
	void  LocalSize (uint);
	void  LocalSize (uint, uint);
	void  LocalSize (uint, uint, uint);
	void  LocalSize (const uint2 &);
	void  LocalSize (const uint3 &);
	void  DispathGroups (uint);
	void  DispathGroups (uint, uint);
	void  DispathGroups (uint, uint, uint);
	void  DispathGroups (const uint2 &);
	void  DispathGroups (const uint3 &);
	void  DispathGroups (const RC<DynamicDim> &);
	void  DispathThreads (uint);
	void  DispathThreads (uint, uint);
	void  DispathThreads (uint, uint, uint);
	void  DispathThreads (const uint2 &);
	void  DispathThreads (const uint3 &);
	void  DispathThreads (const RC<DynamicDim> &);
	void  ArgIn (const string &, const RC<Buffer> &);
	void  ArgOut (const string &, const RC<Buffer> &);
	void  ArgInOut (const string &, const RC<Buffer> &);
	void  ArgIn (const string &, const RC<Image> &);
	void  ArgOut (const string &, const RC<Image> &);
	void  ArgInOut (const string &, const RC<Image> &);
	void  ArgIn (const string &, const RC<Image> &, const string &);
	void  ArgIn (const string &, const RC<VideoImage> &, const string &);
	void  ArgIn (const RC<BaseController> &);
};

struct SceneGraphicsPass
{
	SceneGraphicsPass ();
	void  SetDebugLabel (const string &);
	void  SetDebugLabel (const string &, const RGBA8u &);
	void  SliderI (const string &);
	void  Slider (const string &, int, int);
	void  Slider (const string &, const int2 &, const int2 &);
	void  Slider (const string &, const int3 &, const int3 &);
	void  Slider (const string &, const int4 &, const int4 &);
	void  Slider (const string &);
	void  Slider (const string &, float, float);
	void  Slider (const string &, const float2 &, const float2 &);
	void  Slider (const string &, const float3 &, const float3 &);
	void  Slider (const string &, const float4 &, const float4 &);
	void  ColorSelector (const string &);
	void  Constant (const string &, const RC<DynamicFloat4> &);
	void  Constant (const string &, const RC<DynamicInt4> &);
	void  Output (const RC<Image> &);
	void  Output (const RC<Image> &, const MipmapLevel &);
	void  Output (const RC<Image> &, const ImageLayer &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &);
	void  Output (const RC<Image> &, const RGBA32f &);
	void  Output (const RC<Image> &, const MipmapLevel &, const RGBA32f &);
	void  Output (const RC<Image> &, const ImageLayer &, const RGBA32f &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32f &);
	void  Output (const RC<Image> &, const RGBA32u &);
	void  Output (const RC<Image> &, const MipmapLevel &, const RGBA32u &);
	void  Output (const RC<Image> &, const ImageLayer &, const RGBA32u &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32u &);
	void  Output (const RC<Image> &, const RGBA32i &);
	void  Output (const RC<Image> &, const MipmapLevel &, const RGBA32i &);
	void  Output (const RC<Image> &, const ImageLayer &, const RGBA32i &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32i &);
	void  Output (const RC<Image> &, const DepthStencil &);
	void  Output (const RC<Image> &, const MipmapLevel &, const DepthStencil &);
	void  Output (const RC<Image> &, const ImageLayer &, const DepthStencil &);
	void  Output (const RC<Image> &, const ImageLayer &, const MipmapLevel &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &);
	void  Output (const string &, const RC<Image> &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32f &);
	void  Output (const string &, const RC<Image> &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32u &);
	void  Output (const string &, const RC<Image> &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const RGBA32i &);
	void  Output (const string &, const RC<Image> &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &, const MipmapLevel &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const DepthStencil &);
	void  Output (const string &, const RC<Image> &, const ImageLayer &, const MipmapLevel &, const DepthStencil &);
	void  OutputBlend (const RC<Image> &, EBlendFactor, EBlendFactor, EBlendOp);
	void  OutputBlend (const string &, const RC<Image> &, EBlendFactor, EBlendFactor, EBlendOp);
	void  Input (const RC<BaseController> &);
	void  AddPipeline (const string &);
	void  AddPipelines (const string &);
};

struct Scene
{
	Scene ();
	void  Input (const RC<GeomSource> &, const float3 &);
	void  Input (const RC<GeomSource> &);
	void  Input (const RC<BaseController> &);
	RC<SceneGraphicsPass>  AddGraphicsPass (const string &);
};

RC<DynamicDim>  SurfaceSize ();
void  Present (const RC<Image> &);
void  Present (const RC<Image> &, const MipmapLevel &);
void  Present (const RC<Image> &, const ImageLayer &);
void  Present (const RC<Image> &, const ImageLayer &, const MipmapLevel &);
void  DbgView (const RC<Image> &, DbgViewFlags);
void  DbgView (const RC<Image> &, const MipmapLevel &, DbgViewFlags);
void  DbgView (const RC<Image> &, const ImageLayer &, DbgViewFlags);
void  DbgView (const RC<Image> &, const ImageLayer &, const MipmapLevel &, DbgViewFlags);
void  GenMipmaps (const RC<Image> &);
RC<IPass>  RunScript (const string &, const RC<Collection> &);
RC<IPass>  RunScript (const string &, uint, const RC<Collection> &);
#define SCRIPT

template <>
struct RC<DynamicDim> : DynamicDim
{
	RC (const DynamicDim &);
};

template <>
struct RC<FlightCamera> : FlightCamera
{
	RC (const FlightCamera &);
};

template <>
struct RC<ComputePass> : ComputePass
{
	RC (const ComputePass &);
};

template <>
struct RC<BaseController> : BaseController
{
	RC (const BaseController &);
};

template <>
struct RC<DynamicFloat4> : DynamicFloat4
{
	RC (const DynamicFloat4 &);
};

template <>
struct RC<DynamicInt4> : DynamicInt4
{
	RC (const DynamicInt4 &);
};

template <>
struct RC<GeomSource> : GeomSource
{
	RC (const GeomSource &);
};

template <>
struct RC<FreeFPVCamera> : FreeFPVCamera
{
	RC (const FreeFPVCamera &);
};

template <>
struct RC<SphericalCube> : SphericalCube
{
	RC (const SphericalCube &);
};

template <>
struct RC<FPVCamera> : FPVCamera
{
	RC (const FPVCamera &);
};

template <>
struct RC<VideoImage> : VideoImage
{
	RC (const VideoImage &);
};

template <>
struct RC<Image> : Image
{
	RC (const Image &);
};

template <>
struct RC<TiledTerrain> : TiledTerrain
{
	RC (const TiledTerrain &);
};

template <>
struct RC<Buffer> : Buffer
{
	RC (const Buffer &);
};

template <>
struct RC<Particles> : Particles
{
	RC (const Particles &);
};

template <>
struct RC<IPass> : IPass
{
	RC (const IPass &);
};

template <>
struct RC<Scene> : Scene
{
	RC (const Scene &);
};

template <>
struct RC<SceneGraphicsPass> : SceneGraphicsPass
{
	RC (const SceneGraphicsPass &);
};

template <>
struct RC<UnifiedGeometry> : UnifiedGeometry
{
	RC (const UnifiedGeometry &);
};

template <>
struct RC<Postprocess> : Postprocess
{
	RC (const Postprocess &);
};

template <>
struct RC<Collection> : Collection
{
	RC (const Collection &);
};

template <>
struct RC<Controller2D> : Controller2D
{
	RC (const Controller2D &);
};


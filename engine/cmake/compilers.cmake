# Copyright (c) Zhirnov Andrey. For more information see 'LICENSE'
#
# Build config:
#	- Debug    -- enable all checks
#	- Develop  -- enable some optimization but keep some debug checks
#	- Profile  -- enable some optimizations but keep debug info for profiling
#	- Release  -- enable all optimizations

cmake_minimum_required( VERSION 3.10 FATAL_ERROR )

# detect target platform
if (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")
	set( TARGET_PLATFORM "PLATFORM_LINUX" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Android")
	set( TARGET_PLATFORM "PLATFORM_ANDROID" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
	set( TARGET_PLATFORM "PLATFORM_MACOS" CACHE INTERNAL "" FORCE )

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "iOS")
	set( TARGET_PLATFORM "PLATFORM_IOS" CACHE INTERNAL "" FORCE ) # TODO: check

elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Windows")
	set( TARGET_PLATFORM "PLATFORM_WINDOWS" CACHE INTERNAL "" FORCE )
	
elseif (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten")
	set( TARGET_PLATFORM "PLATFORM_EMSCRIPTEN" CACHE INTERNAL "" FORCE )

else ()
	message( FATAL_ERROR "unsupported platform ${CMAKE_SYSTEM_NAME} ${CMAKE_SYSTEM_VERSION}" )
endif ()
message( STATUS "TARGET_PLATFORM: ${TARGET_PLATFORM}" )

# detect target platform bits
if (${CMAKE_SIZEOF_VOID_P} EQUAL 8)
	set( PLATFORM_BITS 64 CACHE INTERNAL "" FORCE )
elseif (${CMAKE_SIZEOF_VOID_P} EQUAL 4)
	set( PLATFORM_BITS 32 CACHE INTERNAL "" FORCE )
else ()
	message( FATAL_ERROR "unsupported platform bits!" )
endif ()

# detect cpu architecture
if (MSVC)
	if (${CMAKE_GENERATOR_PLATFORM} STREQUAL "ARM64")
		set( TARGET_CPU_ARCH "ARM64" )
	elseif (${CMAKE_GENERATOR_PLATFORM} STREQUAL "ARM")
		set( TARGET_CPU_ARCH "ARM32" )
	elseif (${CMAKE_GENERATOR_PLATFORM} STREQUAL "Win32")
		set( TARGET_CPU_ARCH "X86" )
	elseif (${CMAKE_GENERATOR_PLATFORM} STREQUAL "x64")
		set( TARGET_CPU_ARCH "X64" )
	else()
		message( FATAL_ERROR "unknown platform '${CMAKE_GENERATOR_PLATFORM}'" )
	endif()
else()
	if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64")
		set( TARGET_CPU_ARCH "X64" )
	elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64")
		set( TARGET_CPU_ARCH "X64" )
	elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86")
		set( TARGET_CPU_ARCH "X86" )
	elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "armv7-a")
		set( TARGET_CPU_ARCH "ARM32" )
	elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "aarch64")
		set( TARGET_CPU_ARCH "ARM64" )
	elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "arm64")
		set( TARGET_CPU_ARCH "ARM64" )
	elseif (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "i686")
		set( TARGET_CPU_ARCH "i686" )	# P6 microarchitecture
	else()
		message( FATAL_ERROR "unknown processor '${CMAKE_SYSTEM_PROCESSOR}'" )
	endif()
endif()
message( STATUS "TARGET_CPU_ARCH: ${TARGET_CPU_ARCH}" )

set( "AE_CPU_ARCH_${TARGET_CPU_ARCH}" ON CACHE INTERNAL "" FORCE )

if ( MSVC )
	set( COMPILER_FLAGS "/DAE_${TARGET_PLATFORM}" "/DAE_PLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "/DAE_PLATFORM_BITS=${PLATFORM_BITS}" "/DAE_CPU_ARCH_${TARGET_CPU_ARCH}" "/DAE_CPU_ARCH_NAME=\"${TARGET_CPU_ARCH}\"" "/DAE_ENABLE_RTTI" )
else ()
	set( COMPILER_FLAGS "-DAE_${TARGET_PLATFORM}" "-DAE_PLATFORM_NAME=\"${CMAKE_SYSTEM_NAME}\"" "-DAE_PLATFORM_BITS=${PLATFORM_BITS}" "-DAE_CPU_ARCH_${TARGET_CPU_ARCH}" "-DAE_CPU_ARCH_NAME=\"${TARGET_CPU_ARCH}\"" "-DAE_ENABLE_RTTI" )
endif ()

set( CMAKE_CONFIGURATION_TYPES Release Profile Develop Debug )
set( CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Configurations" FORCE )

set( PROJECTS_SHARED_DEFINES_RELEASE "AE_RELEASE" CACHE INTERNAL "" FORCE )
set( PROJECTS_SHARED_DEFINES_PROFILE "AE_PROFILE" CACHE INTERNAL "" FORCE )
set( PROJECTS_SHARED_DEFINES_DEVELOP "AE_DEVELOP" CACHE INTERNAL "" FORCE )
set( PROJECTS_SHARED_DEFINES_DEBUG   "AE_DEBUG"   CACHE INTERNAL "" FORCE )

#==================================================================================================
# Visual Studio Compilation settings
#==================================================================================================
set( COMPILER_MSVC OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "MSVC" outPos )
if ( (outPos GREATER -1) )
	set( COMPILER_MSVC ON )
endif()
if ( COMPILER_MSVC )
	if (DEFINED DETECTED_COMPILER)
		message( FATAL_ERROR "multiple compiler types detected, previous: '${DETECTED_COMPILER}'" )
	endif()
	set( DETECTED_COMPILER "COMPILER_MSVC" )
	set( CURRENT_C_FLAGS ${CMAKE_C_FLAGS} )
	set( CURRENT_CXX_FLAGS ${CMAKE_CXX_FLAGS} )
	set( CURRENT_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} )
	set( CURRENT_STATIC_LINKER_FLAGS ${CMAKE_STATIC_LINKER_FLAGS} )
	set( CURRENT_SHARED_LINKER_FLAGS ${CMAKE_SHARED_LINKER_FLAGS} )

	# disable c++ exceptions
	if (${AE_NO_EXCEPTIONS})
		string( REPLACE "/EHa" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		string( REPLACE "/EHsc" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		string( REPLACE "/EHs" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		string( REPLACE "/EHs-c-" " " CURRENT_CXX_FLAGS "${CURRENT_CXX_FLAGS}" )
		set( GLOBAL_CPP_EXCEPTIONS_FLAGS "/D_HAS_EXCEPTIONS=0" )
		set( LOCAL_CPP_EXCEPTIONS_FLAGS /EHs-c- )
	else ()
		set( GLOBAL_CPP_EXCEPTIONS_FLAGS "/D_HAS_EXCEPTIONS=1" )
		set( LOCAL_CPP_EXCEPTIONS_FLAGS /EHsc )
	endif ()
	#--------------------------------------------
	
	set( CONFIGURATION_DEPENDENT_PATH ON CACHE INTERNAL "" FORCE )
				
	string( FIND "${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}" "." outLength )
	if ( (outLength GREATER -1) )
		string( SUBSTRING "${CMAKE_VS_WINDOWS_TARGET_PLATFORM_VERSION}" 0 ${outLength} WINDOWS_TARGET_VERSION )
	endif() 
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	
	set( MSVC_WARNING_LIST
		# errors
		/we4002 /we4099 /we4129 /we4130 /we4172 /we4201 /we4238 /we4239 /we4240 /we4251 /we4263 /we4264 /we4266 /we4273 /we4293
		/we4305 /we4390 /we4455 /we4456 /we4457 /we4458 /we4459 /we4473 /we4474 /we4522 /we4552 /we4553 /we4554 /we4700 /we4706 /we4715 /we4716 /we4717
		/we4927 /w14834 /we5062 /we5054 /we4565 /we5054
		# disable warnings
		/wd4061 /wd4062 /wd4063 /wd4310 /wd4324 /wd4365 /wd4503 /wd4514 /wd4530 /wd4623 /wd4625 /wd4626 /wd4710 /wd4714 /wd5026 /wd5027
	)
	if (${AE_ENABLE_COMPILER_WARNINGS})
		set( MSVC_WARNING_LIST ${MSVC_WARNING_LIST}
			# warnings
			/w14018 /w14127 /w14189 /w14244 /w14245 /w14287 /w14389 /w14505 /w14668 /w14701 /w14702 /w14703 /w14838 /w14946 /w14996 /w15038
		)
	else()
		set( MSVC_WARNING_LIST ${MSVC_WARNING_LIST}
			# disable warnings
			/wd4267 /wd4100 /wd4127 /wd4996
		)
	endif()
	
	set( MSVC_SHARED_OPTS /std:c++latest /MP /Gm- /Zc:inline /Gy- /fp:strict /fp:except- /DAE_COMPILER_MSVC /D_SILENCE_CXX20_CISO646_REMOVED_WARNING
		 "/DAE_WINDOWS_TARGET_VERSION=${WINDOWS_TARGET_VERSION}" ${COMPILER_FLAGS} ${MSVC_WARNING_LIST} ${LOCAL_CPP_EXCEPTIONS_FLAGS}
		 /DUNICODE=1 )
		 
	set( MSVC_SHARED_OPTS_DBG ${MSVC_SHARED_OPTS} )
	if (${AE_ENABLE_COMPILER_WARNINGS})
		list( APPEND MSVC_SHARED_OPTS_DBG /w14100 )
	endif()

	# Release
	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} /D_NDEBUG /DNDEBUG /MD /Ox /MP " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} /D_NDEBUG /DNDEBUG /MD /Ox /MP ${GLOBAL_CPP_EXCEPTIONS_FLAGS}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} /LTCG /RELEASE " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE ${MSVC_SHARED_OPTS} /Ob2 /Oi /Ot /Oy /GT /GL /GF /GS- /MD /W3 /Ox /analyze- /EHs-c- CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE " /OPT:REF /OPT:ICF /INCREMENTAL:NO /LTCG /RELEASE /DYNAMICBASE" CACHE INTERNAL "" FORCE )
	# Profile
	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} /D_NDEBUG /DNDEBUG /MD /Ox /MP " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} /D_NDEBUG /DNDEBUG /MD /Ox /Zi /MP ${GLOBAL_CPP_EXCEPTIONS_FLAGS}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} /DEBUG /PROFILE " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} /DEBUG /PROFILE " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} /DEBUG /PROFILE " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE ${MSVC_SHARED_OPTS_DBG} /Ob2 /Oi /Ot /Oy /GT /GL /GF /GS- /MD /W3 /Ox /analyze- /Zi /EHs-c- /GR CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE " /OPT:REF /OPT:ICF /INCREMENTAL:NO /DEBUG /PROFILE" CACHE INTERNAL "" FORCE )
	# Develop
	set( CMAKE_C_FLAGS_DEVELOP "${CURRENT_C_FLAGS} /D_NDEBUG /DNDEBUG /D_ITERATOR_DEBUG_LEVEL=0 /MD /Od /MP " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEVELOP "${CURRENT_CXX_FLAGS} /D_NDEBUG /DNDEBUG /D_ITERATOR_DEBUG_LEVEL=0 /MD /Od /Zi /MP ${GLOBAL_CPP_EXCEPTIONS_FLAGS}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEVELOP "${CURRENT_EXE_LINKER_FLAGS} /DEBUG " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEVELOP "${CURRENT_STATIC_LINKER_FLAGS} /DEBUG " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEVELOP "${CURRENT_SHARED_LINKER_FLAGS} /DEBUG " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEVELOP ${MSVC_SHARED_OPTS_DBG} /Ob2 /Oi /Ot /Oy /GT /GL /GF /GS- /MD /W3 /Od /analyze- /Zi /EHs-c- /GR CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEVELOP " /OPT:REF /OPT:ICF /INCREMENTAL:NO /DEBUG" CACHE INTERNAL "" FORCE )
	# Debug
	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} /D_DEBUG /D_ITERATOR_DEBUG_LEVEL=${AE_ITERATOR_DEBUG_LEVEL} /MDd /Od /MP " CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} /D_DEBUG /D_ITERATOR_DEBUG_LEVEL=${AE_ITERATOR_DEBUG_LEVEL} /MDd /Od /Zi /MP ${GLOBAL_CPP_EXCEPTIONS_FLAGS}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} /DEBUG:FULL " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG ${MSVC_SHARED_OPTS_DBG}  /W4 /WX- /sdl /Od /Ob0 /EHsc /Oy- /GF- /GS /GR /MDd /analyze- /Zi /RTCsu /JMC CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG " /OPT:REF /OPT:ICF /INCREMENTAL:NO /DEBUG:FULL" CACHE INTERNAL "" FORCE )
endif()

#==================================================================================================
# GCC/Clang shared settings
#==================================================================================================
set( GCC_CLANG_SHARED_GLOBAL_WARNING_LIST "-Wno-unused -Wno-switch -Wno-undef -Wno-comment" )
set( GCC_CLANG_SHARED_LOCAL_WARNING_LIST
-Wdouble-promotion -Wchar-subscripts -Wformat -Wmain -Wmissing-braces -Wuninitialized -Wmissing-include-dirs -Wunknown-pragmas -Wpragmas -Wstrict-overflow
-Wstrict-aliasing -Wendif-labels -Wpointer-arith -Wwrite-strings -Wconversion-null -Wenum-compare -Wsign-compare -Wno-unused -Wsizeof-pointer-memaccess
-Wno-zero-as-null-pointer-constant -Wundef -Werror=init-self -Werror=parentheses -Werror=return-type -Werror=array-bounds -Werror=div-by-zero
-Werror=missing-field-initializers -Werror=cast-qual -Werror=cast-align )

if (${AE_NO_EXCEPTIONS})
	set( GCC_CLANG_SHARED_GLOBAL_WARNING_LIST "${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST} -fno-exceptions")
	set( GCC_CLANG_SHARED_LOCAL_WARNING_LIST ${GCC_CLANG_SHARED_LOCAL_WARNING_LIST} -fno-exceptions )
else()
	set( GCC_CLANG_SHARED_GLOBAL_WARNING_LIST "${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST} -fexceptions")
	set( GCC_CLANG_SHARED_LOCAL_WARNING_LIST ${GCC_CLANG_SHARED_LOCAL_WARNING_LIST} -fexceptions )
endif()

#==================================================================================================
# GCC Compilation settings
# https://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
#==================================================================================================
set( COMPILER_GCC OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "GNU" outPos )
if ( (outPos GREATER -1) )
	set( COMPILER_GCC ON )
endif()
if ( COMPILER_GCC )
	if (DEFINED DETECTED_COMPILER)
		message( FATAL_ERROR "multiple compiler types detected, previous: '${DETECTED_COMPILER}'" )
	endif()
	set( DETECTED_COMPILER "COMPILER_GCC" )
	#--------------------------------------------
	set( CONFIGURATION_DEPENDENT_PATH OFF CACHE INTERNAL "" FORCE )
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	
	set( GCC_WARNING_LIST "-Wmaybe-uninitialized -Wfree-nonheap-object -Wcast-align -Wlogical-op -Waddress -Wno-non-template-friend -Werror=return-local-addr -Werror=placement-new -Werror=sign-compare -Werror=literal-suffix -Werror=shadow=local -Werror=delete-incomplete -Werror=odr -Werror=subobject-linkage -Werror=multichar -Winvalid-offsetof ${GCC_CLANG_SHARED_LOCAL_WARNING_LIST}" )
	# -Wno-shadow -Wno-enum-compare -Wno-narrowing -Wno-attributes 
	set( GCC_SHARED_OPTS  "-DAE_COMPILER_GCC ${COMPILER_FLAGS} ${GCC_WARNING_LIST}" )

	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE ${GCC_SHARED_OPTS} -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE " -static-libgcc -static-libstdc++" CACHE INTERNAL "" FORCE )
	# Profile
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE ${GCC_SHARED_OPTS} -O2 CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE " -static-libgcc -static-libstdc++" CACHE INTERNAL "" FORCE )
	# Develop
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Develop>: > )
	set( CMAKE_C_FLAGS_DEVELOP "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEVELOP "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEVELOP "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEVELOP "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEVELOP "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEVELOP ${GCC_SHARED_OPTS} -ggdb -Og -Wno-terminate  CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEVELOP " -static-libgcc -static-libstdc++" CACHE INTERNAL "" FORCE )
	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og ${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG ${GCC_SHARED_OPTS} -ggdb -Og -Wno-terminate  CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG " -static-libgcc -static-libstdc++" CACHE INTERNAL "" FORCE )
endif()

#==================================================================================================
# Clang shared settings
# https://clang.llvm.org/docs/DiagnosticsReference.html
#==================================================================================================
set( CLANG_SHARED_GLOBAL_WARNING_LIST "${GCC_CLANG_SHARED_GLOBAL_WARNING_LIST} -Wnarrowing" )
set( CLANG_SHARED_LOCAL_WARNING_LIST ${GCC_CLANG_SHARED_LOCAL_WARNING_LIST}
-Wnarrowing -Wlogical-op-parentheses -frtti -Wunused -Wconditional-uninitialized -Wloop-analysis -Wincrement-bool -Wno-undefined-inline
-Wc++14-extensions -Wc++17-extensions -Wno-comment -Wunused-private-field -Werror=return-stack-address -Werror=address -Werror=unsupported-friend
-Werror=unknown-warning-option -Werror=user-defined-literals -Werror=instantiation-after-specialization -Werror=keyword-macro -Werror=large-by-value-copy
-Werror=method-signatures -Werror=self-assign -Werror=self-move -Werror=infinite-recursion -Werror=pessimizing-move -Werror=dangling-else -Werror=return-std-move
-Werror=deprecated-increment-bool -Wno-ambiguous-reversed-operator -Wno-unneeded-internal-declaration -Wno-unused-function -Wno-unused-const-variable
-Wunused-local-typedef -Wdelete-non-virtual-dtor -Wrange-loop-analysis -Wundefined-bool-conversion -Winconsistent-missing-override -Wincrement-bool
-Wunused-lambda-capture -fno-short-enums )

#set( CLANG_SANITIZER -fsanitize=address )
#set( CLANG_SANITIZER -fsanitize=thread )
#set( CLANG_SANITIZER -fsanitize=undefined )


#==================================================================================================
# Clang Compilation settings
#==================================================================================================
set( COMPILER_CLANG OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
if ( (outPos GREATER -1) AND ((${CMAKE_SYSTEM_NAME} STREQUAL "Windows") OR (${CMAKE_SYSTEM_NAME} STREQUAL "Linux")) )
	set( COMPILER_CLANG ON )
endif()
if ( COMPILER_CLANG )
	if (DEFINED DETECTED_COMPILER)
		message( FATAL_ERROR "multiple compiler types detected, previous: '${DETECTED_COMPILER}'" )
	endif()
	set( DETECTED_COMPILER "COMPILER_CLANG" )
	#--------------------------------------------
	set( CONFIGURATION_DEPENDENT_PATH OFF CACHE INTERNAL "" FORCE )
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	
	set( CLANG_SHARED_OPTS  -DAE_COMPILER_CLANG ${COMPILER_FLAGS} ${CLANG_SHARED_LOCAL_WARNING_LIST} )
	
	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE ${CLANG_SHARED_OPTS} -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )
	# Profile
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE  ${CLANG_SHARED_OPTS} -O2 -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE "" CACHE INTERNAL "" FORCE )
	# Develop
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Develop>: > )
	set( CMAKE_C_FLAGS_DEVELOP "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEVELOP "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEVELOP "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEVELOP "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEVELOP "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEVELOP  ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEVELOP "" CACHE INTERNAL "" FORCE )
	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG  ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )
endif()


#==================================================================================================
# Emscripten Clang Compilation settings
#==================================================================================================
set( COMPILER_CLANG_EMSCRIPTEN OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
if ( (outPos GREATER -1) AND (${CMAKE_SYSTEM_NAME} STREQUAL "Emscripten") )
	set( COMPILER_CLANG_EMSCRIPTEN ON )
endif()
if ( COMPILER_CLANG_EMSCRIPTEN )
	if (DEFINED DETECTED_COMPILER)
		message( FATAL_ERROR "multiple compiler types detected, previous: '${DETECTED_COMPILER}'" )
	endif()
	set( DETECTED_COMPILER "COMPILER_CLANG_EMSCRIPTEN" )
	#--------------------------------------------
	set( CONFIGURATION_DEPENDENT_PATH OFF CACHE INTERNAL "" FORCE )
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	
	set( CLANG_SHARED_OPTS  -DAE_COMPILER_CLANG ${COMPILER_FLAGS} ${CLANG_SHARED_LOCAL_WARNING_LIST} )
	
	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE ${CLANG_SHARED_OPTS} -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )
	# Profile
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE  ${CLANG_SHARED_OPTS} -O2 -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE "" CACHE INTERNAL "" FORCE )
	# Develop
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Develop>: > )
	set( CMAKE_C_FLAGS_DEVELOP "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEVELOP "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEVELOP "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEVELOP "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEVELOP "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEVELOP  ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEVELOP "" CACHE INTERNAL "" FORCE )
	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG  ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )
endif()


#==================================================================================================
# Apple Clang Compilation settings
#==================================================================================================
set( COMPILER_CLANG_APPLE OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
if ( (outPos GREATER -1) AND ((${CMAKE_SYSTEM_NAME} STREQUAL "Darwin") OR (${CMAKE_SYSTEM_NAME} STREQUAL "iOS")) )
	set( COMPILER_CLANG_APPLE ON )
endif()
if ( COMPILER_CLANG_APPLE )
	if (DEFINED DETECTED_COMPILER)
		message( FATAL_ERROR "multiple compiler types detected, previous: '${DETECTED_COMPILER}'" )
	endif()
	set( DETECTED_COMPILER "COMPILER_CLANG_APPLE" )
	#--------------------------------------------
	set( CONFIGURATION_DEPENDENT_PATH ON CACHE INTERNAL "" FORCE )
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	
	set( CLANG_SHARED_OPTS -DAE_COMPILER_CLANG ${COMPILER_FLAGS} ${CLANG_SHARED_LOCAL_WARNING_LIST} -Werror=objc-method-access )

	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE ${CLANG_SHARED_OPTS} -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE "" CACHE INTERNAL "" FORCE )
	# Profile
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE ${CLANG_SHARED_OPTS} -O2 -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE "" CACHE INTERNAL "" FORCE )
	# Develop
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Develop>: > )
	set( CMAKE_C_FLAGS_DEVELOP "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEVELOP "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEVELOP "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEVELOP "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEVELOP "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEVELOP ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEVELOP "" CACHE INTERNAL "" FORCE )
	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG "" CACHE INTERNAL "" FORCE )
endif()


#==================================================================================================
# Android Clang Compilation settings
#==================================================================================================
set( COMPILER_CLANG_ANDROID OFF )
string( FIND "${CMAKE_CXX_COMPILER_ID}" "Clang" outPos )
if ( (outPos GREATER -1) AND (${CMAKE_SYSTEM_NAME} STREQUAL "Android") )
	set( COMPILER_CLANG_ANDROID ON )
endif()
if ( COMPILER_CLANG_ANDROID )
	if (DEFINED DETECTED_COMPILER)
		message( FATAL_ERROR "multiple compiler types detected, previous: '${DETECTED_COMPILER}'" )
	endif()
	set( DETECTED_COMPILER "COMPILER_CLANG_ANDROID" )
	#--------------------------------------------
	set( CONFIGURATION_DEPENDENT_PATH OFF CACHE INTERNAL "" FORCE )
	#--------------------------------------------
	message( STATUS "CMAKE_C_FLAGS: ${CURRENT_C_FLAGS}" )
	message( STATUS "CMAKE_CXX_FLAGS: ${CURRENT_CXX_FLAGS}" )
	message( STATUS "CMAKE_EXE_LINKER_FLAGS: ${CURRENT_EXE_LINKER_FLAGS}" )
	message( STATUS "CMAKE_STATIC_LINKER_FLAGS: ${CURRENT_STATIC_LINKER_FLAGS}" )
	message( STATUS "CMAKE_SHARED_LINKER_FLAGS: ${CURRENT_SHARED_LINKER_FLAGS}" )
	
	set( CLANG_SHARED_OPTS -DAE_COMPILER_CLANG ${COMPILER_FLAGS} ${CLANG_SHARED_LOCAL_WARNING_LIST} -fstack-protector-strong -fPIC )
	# TODO: 
	#	armv7:
	#		-mfloat-abi=softfp -mfpu=neon -mfpu=vfpv3-d16

	# Release
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Release>: > )
	set( CMAKE_C_FLAGS_RELEASE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_RELEASE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O3 -finline-functions ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_RELEASE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_RELEASE ${CLANG_SHARED_OPTS} -O3 -Ofast -fomit-frame-pointer -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_RELEASE " -static" CACHE INTERNAL "" FORCE )
	# Profile
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Profile>: > )
	set( CMAKE_C_FLAGS_PROFILE "${CURRENT_C_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_PROFILE "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_PROFILE "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_PROFILE "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_PROFILE "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_PROFILE ${CLANG_SHARED_OPTS} -O2 -finline-functions CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_PROFILE " -static" CACHE INTERNAL "" FORCE )
	# Develop
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Develop>: > )
	set( CMAKE_C_FLAGS_DEVELOP "${CURRENT_C_FLAGS}  -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEVELOP "${CURRENT_CXX_FLAGS} -D_NDEBUG -DNDEBUG  -O2 ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEVELOP "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEVELOP "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEVELOP "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEVELOP ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEVELOP " -static" CACHE INTERNAL "" FORCE )
	# Debug
	set_property( DIRECTORY APPEND PROPERTY COMPILE_DEFINITIONS $<$<CONFIG:Debug>: > )
	set( CMAKE_C_FLAGS_DEBUG "${CURRENT_C_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_CXX_FLAGS_DEBUG "${CURRENT_CXX_FLAGS} -D_DEBUG -Og ${CLANG_SHARED_GLOBAL_WARNING_LIST}" CACHE STRING "" FORCE )
	set( CMAKE_EXE_LINKER_FLAGS_DEBUG "${CURRENT_EXE_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CURRENT_STATIC_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CURRENT_SHARED_LINKER_FLAGS} " CACHE STRING "" FORCE )
	set( PROJECTS_SHARED_CXX_FLAGS_DEBUG ${CLANG_SHARED_OPTS} -ggdb -Og CACHE INTERNAL "" FORCE )
	set( PROJECTS_SHARED_LINKER_FLAGS_DEBUG " -static" CACHE INTERNAL "" FORCE )
endif()


if ( NOT DEFINED DETECTED_COMPILER )
	message( FATAL_ERROR "current compiler: '${CMAKE_CXX_COMPILER_ID}' is not configured for this project!" )
endif()
